(* This generated code requires the following version of MenhirLib: *)

open Gospel

let () = MenhirLib.StaticVersion.require_20231231

module MenhirBasics = struct
  exception Error

  let _eRR _s = raise Error

  type token =
    | WITH
    | WHEN
    | VARIANT
    | UNDERSCORE
    | UIDENT of string
    | TRUE
    | TILDE
    | THEN
    | STRING of string
    | STAR
    | SEMICOLON
    | RIGHTSQ
    | RIGHTPAR
    | RIGHTBRC
    | REQUIRES
    | REC
    | RAISES
    | QUOTE_LIDENT of string
    | QUESTION
    | PURE
    | PREDICATE
    | OR
    | OPPREF of string
    | OP4 of string
    | OP3 of string
    | OP2 of string
    | OP1 of string
    | OLD
    | NOT
    | MUTABLE
    | MODIFIES
    | MODEL
    | MATCH
    | LTGT
    | LRARROW
    | LIDENT of string
    | LET
    | LEFTSQRIGHTSQ
    | LEFTSQ
    | LEFTPAR
    | LEFTBRCRIGHTBRC
    | LEFTBRCCOLON
    | LEFTBRC
    | INVARIANT
    | INTEGER of (string * char option)
    | IN
    | IF
    | FUNCTION
    | FUN
    | FORALL
    | FLOAT of string
    | FALSE
    | EXISTS
    | EQUIVALENT
    | EQUAL
    | EPHEMERAL
    | EOF
    | ENSURES
    | ELSE
    | DOTDOT
    | DOT
    | DIVERGES
    | CONSUMES
    | COMMA
    | COLONRIGHTBRC
    | COLONCOLON
    | COLON
    | COERCION
    | CHECKS
    | CHAR of char
    | BARBAR
    | BAR
    | BACKQUOTE_LIDENT of string
    | AXIOM
    | ATTRIBUTE of string
    | AS
    | ARROW
    | AND
    | AMPAMP
end

include MenhirBasics
open Ppxlib
open Identifier
open Uast

let mk_loc (s, e) =
  { Location.loc_start = s; Location.loc_end = e; Location.loc_ghost = false }

let mk_pid pid l = Preid.create pid ~attrs:[] ~loc:(mk_loc l)
let mk_term d l = { term_desc = d; term_loc = mk_loc l }
let mk_pat d l = { pat_desc = d; pat_loc = mk_loc l }
let get_op l = Qpreid (mk_pid (mixfix "[_]") l)
let set_op l = Qpreid (mk_pid (mixfix "[->]") l)
let sub_op l = Qpreid (mk_pid (mixfix "[_.._]") l)
let above_op l = Qpreid (mk_pid (mixfix "[_..]") l)
let below_op l = Qpreid (mk_pid (mixfix "[.._]") l)
let id_anonymous loc = Preid.create "_" ~attrs:[] ~loc
let array_get l = Qdot (Qpreid (mk_pid "Array" l), mk_pid "get" l)

let empty_vspec =
  {
    sp_header = None;
    sp_pre = [];
    sp_checks = [];
    sp_post = [];
    sp_xpost = [];
    sp_writes = [];
    sp_consumes = [];
    sp_diverge = false;
    sp_pure = false;
    sp_equiv = [];
    sp_text = "";
    sp_loc = Location.none;
  }

let empty_fspec =
  {
    fun_req = [];
    fun_ens = [];
    fun_variant = [];
    fun_coer = false;
    fun_text = "";
    fun_loc = Location.none;
  }

let loc_of_qualid = function Qpreid pid | Qdot (_, pid) -> pid.pid_loc
let qualid_preid = function Qpreid p | Qdot (_, p) -> p

module Tables = struct
  include MenhirBasics

  let token2terminal : token -> int =
   fun _tok ->
    match _tok with
    | AMPAMP -> 79
    | AND -> 78
    | ARROW -> 77
    | AS -> 76
    | ATTRIBUTE _ -> 75
    | AXIOM -> 74
    | BACKQUOTE_LIDENT _ -> 73
    | BAR -> 72
    | BARBAR -> 71
    | CHAR _ -> 70
    | CHECKS -> 69
    | COERCION -> 68
    | COLON -> 67
    | COLONCOLON -> 66
    | COLONRIGHTBRC -> 65
    | COMMA -> 64
    | CONSUMES -> 63
    | DIVERGES -> 62
    | DOT -> 61
    | DOTDOT -> 60
    | ELSE -> 59
    | ENSURES -> 58
    | EOF -> 57
    | EPHEMERAL -> 56
    | EQUAL -> 55
    | EQUIVALENT -> 54
    | EXISTS -> 53
    | FALSE -> 52
    | FLOAT _ -> 51
    | FORALL -> 50
    | FUN -> 49
    | FUNCTION -> 48
    | IF -> 47
    | IN -> 46
    | INTEGER _ -> 45
    | INVARIANT -> 44
    | LEFTBRC -> 43
    | LEFTBRCCOLON -> 42
    | LEFTBRCRIGHTBRC -> 41
    | LEFTPAR -> 40
    | LEFTSQ -> 39
    | LEFTSQRIGHTSQ -> 38
    | LET -> 37
    | LIDENT _ -> 36
    | LRARROW -> 35
    | LTGT -> 34
    | MATCH -> 33
    | MODEL -> 32
    | MODIFIES -> 31
    | MUTABLE -> 30
    | NOT -> 29
    | OLD -> 28
    | OP1 _ -> 27
    | OP2 _ -> 26
    | OP3 _ -> 25
    | OP4 _ -> 24
    | OPPREF _ -> 23
    | OR -> 22
    | PREDICATE -> 21
    | PURE -> 20
    | QUESTION -> 19
    | QUOTE_LIDENT _ -> 18
    | RAISES -> 17
    | REC -> 16
    | REQUIRES -> 15
    | RIGHTBRC -> 14
    | RIGHTPAR -> 13
    | RIGHTSQ -> 12
    | SEMICOLON -> 11
    | STAR -> 10
    | STRING _ -> 9
    | THEN -> 8
    | TILDE -> 7
    | TRUE -> 6
    | UIDENT _ -> 5
    | UNDERSCORE -> 4
    | VARIANT -> 3
    | WHEN -> 2
    | WITH -> 1

  and error_terminal = 0

  and token2value : token -> Obj.t =
   fun _tok ->
    match _tok with
    | AMPAMP -> Obj.repr ()
    | AND -> Obj.repr ()
    | ARROW -> Obj.repr ()
    | AS -> Obj.repr ()
    | ATTRIBUTE _v -> Obj.repr _v
    | AXIOM -> Obj.repr ()
    | BACKQUOTE_LIDENT _v -> Obj.repr _v
    | BAR -> Obj.repr ()
    | BARBAR -> Obj.repr ()
    | CHAR _v -> Obj.repr _v
    | CHECKS -> Obj.repr ()
    | COERCION -> Obj.repr ()
    | COLON -> Obj.repr ()
    | COLONCOLON -> Obj.repr ()
    | COLONRIGHTBRC -> Obj.repr ()
    | COMMA -> Obj.repr ()
    | CONSUMES -> Obj.repr ()
    | DIVERGES -> Obj.repr ()
    | DOT -> Obj.repr ()
    | DOTDOT -> Obj.repr ()
    | ELSE -> Obj.repr ()
    | ENSURES -> Obj.repr ()
    | EOF -> Obj.repr ()
    | EPHEMERAL -> Obj.repr ()
    | EQUAL -> Obj.repr ()
    | EQUIVALENT -> Obj.repr ()
    | EXISTS -> Obj.repr ()
    | FALSE -> Obj.repr ()
    | FLOAT _v -> Obj.repr _v
    | FORALL -> Obj.repr ()
    | FUN -> Obj.repr ()
    | FUNCTION -> Obj.repr ()
    | IF -> Obj.repr ()
    | IN -> Obj.repr ()
    | INTEGER _v -> Obj.repr _v
    | INVARIANT -> Obj.repr ()
    | LEFTBRC -> Obj.repr ()
    | LEFTBRCCOLON -> Obj.repr ()
    | LEFTBRCRIGHTBRC -> Obj.repr ()
    | LEFTPAR -> Obj.repr ()
    | LEFTSQ -> Obj.repr ()
    | LEFTSQRIGHTSQ -> Obj.repr ()
    | LET -> Obj.repr ()
    | LIDENT _v -> Obj.repr _v
    | LRARROW -> Obj.repr ()
    | LTGT -> Obj.repr ()
    | MATCH -> Obj.repr ()
    | MODEL -> Obj.repr ()
    | MODIFIES -> Obj.repr ()
    | MUTABLE -> Obj.repr ()
    | NOT -> Obj.repr ()
    | OLD -> Obj.repr ()
    | OP1 _v -> Obj.repr _v
    | OP2 _v -> Obj.repr _v
    | OP3 _v -> Obj.repr _v
    | OP4 _v -> Obj.repr _v
    | OPPREF _v -> Obj.repr _v
    | OR -> Obj.repr ()
    | PREDICATE -> Obj.repr ()
    | PURE -> Obj.repr ()
    | QUESTION -> Obj.repr ()
    | QUOTE_LIDENT _v -> Obj.repr _v
    | RAISES -> Obj.repr ()
    | REC -> Obj.repr ()
    | REQUIRES -> Obj.repr ()
    | RIGHTBRC -> Obj.repr ()
    | RIGHTPAR -> Obj.repr ()
    | RIGHTSQ -> Obj.repr ()
    | SEMICOLON -> Obj.repr ()
    | STAR -> Obj.repr ()
    | STRING _v -> Obj.repr _v
    | THEN -> Obj.repr ()
    | TILDE -> Obj.repr ()
    | TRUE -> Obj.repr ()
    | UIDENT _v -> Obj.repr _v
    | UNDERSCORE -> Obj.repr ()
    | VARIANT -> Obj.repr ()
    | WHEN -> Obj.repr ()
    | WITH -> Obj.repr ()

  and default_reduction =
    ( 16,
      "\000\000\000\000\0002\000\000\000\000\001\n\
       \000\220\000\028\000o\000\000\000\226\000\000\000\225\000\000\000q\000\229\000\000\000n\000m\000l\000k\000\000\000\000\000\000\000\000\000\131\000\135\000\137\000\000\000~\000\000\0006\000\000\000\000\0008\000\000\000\000\000:\000<\000\000\000\000\000;\000\000\0009\000\000\000\000\000\000\000\000\001\012\000P\001\011\000\031\000\000\000\000\000\169\000\000\000\000\000\026\000\027\000\136\000\000\000\000\000\134\000\000\000\000\000J\000W\000\128\000\000\000\000\000\000\000\142\000\146\000}h\000\000\000\000\000\000\000\000\000&\000u\000\000\000\000\000\155\000\156\000\000\000\000\000\000\000[\000\238\0001\000?\000\000\000\154\000\000\000\000\000\\\000\000\000\000\000\000\000\237\000\000\000\000\000\000\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000\206\000\216\000\000\000\022\000\000\000\000\000\180\000\000\000\157\000s\000\000\000b\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\218\000\000\000\191\000\152\000\231\000\217\000\187\000\232\000\000\000\153\000\219\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\244\000\000\000\240\000\000\000\243\000\000\000\242\000\000\000\000\000\241\000Z\000\000\000\207\000\000\000f\000\000\000\246\000\000\000\000\000\000\000\000\000R\000>\000\239\000Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\224\000\000\000\000\000\000\000\172\000\000\000\000\000\000\000\000\000\000\000\030\000\000\000\228\000\000\000\000\000\000\000\227\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\176\000\012\000\211\000S\000\000\000\000\000\000\000\184\000\023\000\025\000\000\000\000\000\212\000\000\000\000\000\000\000\230\000\233\000\222\000\000\000\000\000\245\000\000\000\t\000\001\000\000\000\000\000\018\000\000\000\000\000\000\000*\000\000\000\000\000\000\000+\000)\000\000\000\000\000\000\000\000\000\000\000z\000\000\000d\000\000\000\000\000\000\000\000\000(\000\000\000|\000\000\000\000\000\000\000H\000\000\000\000\000\000\000\000\000'\000\002\000\000\000\000\000\000\000\000\000\000\000,\000\000\000\000\000\000\000\000\000-\000`\000^\000]\000_\000,\000\000\000-\000\003\000\000\000\247\000\004\000\000\000\016\000\000\000E\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000j\000\250\000\000\001\b\000\000\000\000\000\000\000\000\000\000\000\166\000\000\000\000\000L\000\000\000\000\000\182\000\165\000\000\000\000\000\163\000y\000\005\000\020\000\000\000\000\000\"\000\000\000#\000\000\000\000\000\000\000\000\000$\000\000\000 \
       \000\000\000\000\001\024\000!\000\000\000C\000\000\000\000\000\000\001\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\000\000\174\000\n\
       \000\000\000\000\000\000\000N\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\020\001\018\001\016\001\021\001\023\001\017\001\015\001\022\001\019\000\000\001\r\000\000\001\026\000\000\000\000\000\164"
    )

  and error =
    ( 80,
      "\000\000\000\000\000\000\000\000\000 \
       \000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\006`\001\252N\245|\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006@\001\000\n\
       \244\024\000\002\000\000\000\000\000\000\000\000\000\000\000\006d\001\252O\245}\004\002\016\000\000\000\000\000\000\000\000\000\000\014D\001\000\n\
       \244\024\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006`\001\252N\245|\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006`\001\252N\245|\000\002\016\006`\001\252N\245|\000\002\016\006`\001\252N\245|\000\002\016\014@\000\000\n\
       \148\024\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014d\001\240\011\148\025\004\002\000\000\000\000\000\000\000\000\000\000\000\b\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\b\000\004\000\b\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\b\b\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014D\000\000\n\
       \148\024\000\002\000\004\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\004\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\004\002\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\000\000\001\000\000\000\014@\000\000\n\
       \148\024\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000.WH\001\n\
       \148\027k\182\140\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000.V\000\000\n\
       \148\025\004\178\140\014D\000\000\n\
       \148\024\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \022\000\000\000\000\001\000\176\140\000\000\000\000\000\000\000\000 \
       \000\014@\000\000\n\
       \148\024\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000.WH\001\n\
       \148\027g\182\156\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000.WH\001\n\
       \148\027g\182\156\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \022\000\000\000\000\001\000\144\140\014@\000\000\n\
       \148\024\000\002\000\000\000\000\000\000\000\000\000\000\000\004\000 \
       \000\b\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\0000\000\b\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\004\0000\000\b\128\000\000\000\000\000\000\000\000\000\000\000\000\000\004\004\0000\000\b\128\000\000\000\000@\012\000\002\128\000\001@\128\004\004\0000\000\b\128\000\000\000\000@\012\000\002\128\000\001@\128\004D,\000\002\136\000\001@\128\004\004\000 \
       \000\b\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000D,\000\002\136\000\001@\128\004\004\000 \
       \000\b\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D,\000\002\136\000\001@\144\004\004\0000\000\b\128\000\000\000\000\000\000\000\000\000\000\000\000\000\004\004\0000\000\b\128\000\000\000\000@\012\000\002\128\000\001@\128\004\000\004\000\000\000\000\000\000\128\004\000\000\000\000\000\000\000\000\000\000\004\0000\000\b\128\000\000\000\000\000\004\000\000\000\000\000\000\128\004\004\0000\000\b\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\004\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000t\191J\2418\n\
       \003\127\253\207\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000.WH\001\n\
       \148\027g\150\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \022\000\000\000\000\001\000\144\140 \
       \022\000\000\000\000\001\000\000\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\b\014@\000\000\n\
       \148\024\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\014@\000\000\n\
       \148\024\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\006`\001\252N\245|\000\002\016\006@\001\000\n\
       \244\024\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\004\000\000\000\n\
       \240\000\000\000\000\006d\001\252O\245}\004\002\016\006`\001\252N\245|\000\002\016\014@\000\000\n\
       \148\024\000\002\000\000\000\000\000\000\000\000\000\000\000\014@\000\000\n\
       \148\024\000\018\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\004\004\000 \
       \000\b\128\000\000\000\000\004 \000\000\b\000\000\000\000\004\004\000 \
       \000\b\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\006`\001\252N\245|\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\004\000\000\000\n\
       \240\000\000\000\000V\255K\241;\254\027\127\255\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\255K\241;\254\027\127\255\199\000\000\000\000\000\000\000\000\000\000V\255K\241;\254\027\127\255\199V\255K\241;\254\027\127\255\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\004\000\000\000\b\128\000\000\000\000\006`\001\252O\245}\004\002\016\000\000\000\000\000\000\000\000\000\000V\255K\241;\254\027{\255\199\006@\001\000\011\244\024\000\002\000\006`\001\252N\245|\b\002\016\006`\001\252N\245|\000\002\016\000\000\000\000\000\000\000\000\000\000\000(\002\2400\000\001\0001G\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\006`\001\252N\245|\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\144\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\004\144\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\000\000\000\000\000\000\000\000\000\000\006`\001\252N\245|\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\255K\241;\254\027\127\255\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\000\000\000\000\000\000\000\000\000\000\000(\002\2400\000\001\b1G\000\000\000\000\000\000\000\000\000\000\006h\001\252N\245|\000\002\016\000\000\000\000\000\000\000\000\000\000\000(\002\2400\000\001\0001G\000\000\000\000\000\000\000\000\000\000\006`\001\252N\245|\000\002\016\000(\002\2400\000\001\b1G\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\255K\241;\254\027{\255\199\000\000\000\000\000\000\000\000\000\000V\255K\241:\254\027{\255\199\000\000\000\000\000\000\000\000\000\000\000$\002\2400\000\001\0001G\000\000\000\000\000\000\000\000\000\000\014d\001\252N\245|\000\002\016\000\000\000\000\000\000\000\004\000\000\004\000\000\000\b\128\000\000\000\000\000 \
       \001\240\001\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000P\191J\2410\n\
       \003{\253\199\000\160\002\2400\000\001\0001G\006`\001\252N\245|\000\002\016\000 \
       \002\2400\000\001\0161G\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\000$\002\2400\000\001\0001G\000\000\000\000\000\000\000\000\000\000@\018\000\000\001\000\001\004\000\000\000\018\000\000\000\000\000\000\000\000\004\002\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\000\000\001\000\000\000\006`\001\252N\245|\000\002\016\0002\002\2400\000\001\0001G@\000\000\000\001\000\000\000\000\000\004\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\000\000\001\004\000\000@\018\000\000\001\000\001\004\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \002\2400\002\001\0001G\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\000\000\000\000\000\000\001\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\006`\001\252N\245|\000\002\016\000 \
       \002\2400\002\001\0001G\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199@ \002\2400\000\001\000\177G\014@\000\000\n\
       \148\024\000\002\128\014@\000\000\n\
       \148\024\000\002\000\000\000\000\000\000\000\000\000\000\000 \
       \000\000\000\000\000\000\000\000\004\006`\001\252N\245|\000\002\016\000 \
       \002\2400\000\001\0001G\000\000\000\000\000\000\000\000\000\004\006`\001\252N\245|\000\002\016P\191J\2410\n\
       \003{\253\199\014@\000\000\n\
       \148\024\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006`\001\252N\245|\000\002\016@%J\2410\000\003c\181G\006`\001\252N\245|\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\014@\000\000\n\
       \148\024\000\002\128\000\000\000\000\000\000\000\000\000\000P\191J\2410\n\
       \003{\253\199P\191J\2410\n\
       \003{\253\199\000 \
       \002\2400\000\001\000qG\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\002\2400\000\001\000\177G\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \002\2400\000\001@1G\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\128\000\000\000\000\000\128\000\b\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000\000\000\000\000 \
       \001\240\001`\001\004\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\004\0000\000\b\128\000\000\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001@\000\000\006`\001\252N\245|\000\002\016\000 \
       \002\2400\000\001@1G\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\001@\016\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\128\000\000\000\000\000\000\000\000\b\128\000\000\000\000\000\000\000\000\000\128\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\004\0000\000\b\128\000\000\000\000\000\000\000\000\000\000\001@\000\004\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\001\000\000\000\000\000`\b\000\006`\001\252N\245|\000\002\016\016!\002\2400\000\001`9G\006`\001\252N\245|\000\002\016\016!\002\2400\000\001`9G\000\000\000\000\000\000\000\000\000\000\006`\001\252N\245|\000\002\016\016!\002\2400\000\001`9G\016\001\000\000\000\000\000`\bb\128\000\000\000\000\000\000\000\000\000\000\000\000\016\000\004\0000\000\b\128\000\000\000\000@\000\000\002\128\000\000@\000\004@\000\000\000\000\000\000@\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\006`\001\252N\245|\000\002\016\000 \
       \002\2400\b\001@1G\000\000\000\000\000\b\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001H\001\t\128\002c\004\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\004\0000\000\b\128\000\000\000\000\000\b\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000$\001\240\t\000\001\004\000\000\b\000\000\000\b\000\000\b\000\004\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\001\000\128\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\016\000\t\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\004\0000\000\b\128\000\000\000\000\000\b\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000$\001\240\001\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\001\001X\001\t\128\002c\004\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001X\001\t\128\002c\004\000\000\000\000\000\000\000\000\000\000\000\001!X\241\t\128\002c\004\000\000 \
       \000\240\000\000\000\000\000\000\001\000\016\000\t\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001H\001\000\000\002c\004\000\006`\001\252N\245|\000\002\016\000!J\2410\000\003c5G\004\000\000\000\000\000\000\000\000\128\004\000\000\000\000\000\000\000\000\000\014AH\001\n\
       \148\026g\006\132\006`\001\252N\245|\000\002\016\000!J\2410\000\003c5\199\000\001H\001\000\000\002c\004\132\006`\001\252N\245|\000\002\016\000!J\2410\000\003c5\199\000\000\000\000\000\000\000\000\000\000\000\001H\001\000\000\002c\004\128\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001H\001\000\000\002c\004\000\000\001H\001\000\000\002c\004\000\006aI\253N\245~c\006\016\000\000\000\000\000\000\000\000\000\000\000\001H\001\000\000\002c\004\000\000@\000\000\000\000\000\000\000\000\000\001H\001\000\000\002c\004\000\006`\001\252N\245|\000\002\016\000!J\2410\000\003c5G\000\001H\001\000\000\002c\004\000\006aI\253N\245~c\006\016\000\001H\001\000\000\002c\004\000\006`\001\252N\245|\000\002\016\000!J\2410\000\003c5G\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\001\001X\001\t\128\002c\004\000\000\000\000\000\000\000\000\000\000\000\001\001X\001\t\128\003c\132\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000"
    )

  and start = 5

  and action =
    ( ( 16,
        "\000\147\000+\000\000\000`\018\174\000\000\000\000\000\000\000\000\004P\000\000\020\234\000\000\0276\000\000\000\000\018\174\000\000\000\000\000\000\000\000\018\174\018\174\018\174\004\238\000\000\000\000\000\000\024\150\000\000\001\\\000\000\000`\000\136\000\000\0000\000\228\000\000\000\000\001\148\001\186\000\000\001\200\000\000\024\150\000\026\001\150\000\026\000\000\000\000\000\000\000\000\001^\000\026\000\000\000\017\005\140\000\000\000\000\000\000\019\214\002$\000\000\024\012\027\240\000\000\000\000\000\000\006l\002\134\005\140\000\000\000\000\000\000\019>\000\000\000\000\019>\000\000\000\000\000\000\006\254\005\140\000\000\0064\000\000\0064\000+\002\146\0064\002\130\0064\022\240\0064\025\020\028\138\0064\000\000\028\158\0064\000\000\000\000\000\000\000\000\000\000\021\254\0064\002\164\0064\029\024\002\028\000\000\0064\002\244\0064\000\000\0036\000\026\000\000\004\238\000+\000\000\003:\000\000\000\026\020`\000\000\000\000\000\000\000\000\000\000\007\144\b\024\000\000\000<\005\140\000\000\000\000\002\198\005\140\000\000\000\000\003B\000\000\003\\\000\000\000\000\0034\003\142\000\000\001\250\000\000\003\144\000\000\003>\018\174\004P\000\000\000\000\003<\019\188\020\234\018\174\005\140\000\000\027\240\000\000\000\216\0064\001\210\0064\000\000\000\000\003&\018\174\000\000\000\000\003\\\019\188\000\003\000\000\000\000\000\000\000\000\000\156\000\000\001:\001\216\000\000\003b\000\182\020\234\000\000\003\020\004P\018\174\018\174\000\000\021\178\018\174\005\140\018\174\006\030\018\174\000\000\000\000\000+\000\000\002\004\000+\000\000\002\248\000\000\000\000\018\248\000\000\000\000\003r\018\174\006\176\018\174\007B\018\174\007\212\000\000\018\174\000\000\000\000\000\000\000\000\000\000\000\000\002v\000\000\000\000\018\174\bf\018\174\b\248\018\174\t\138\018\174\n\
         \028\018\174\n\
         \174\018\174\011@\018\174\011\210\018\174\012d\018\174\012\246\018\174\r\136\018\174\014\026\000\000\025\138\000\000\018\174\000\000\024\214\000\000\018\174\025\254\000\000\000\000\003\178\000\000\004P\000\000\026\154\000\000\021T\003t\0014\019:\000\000\000\000\000\000\000\000\014\172\021\178\018\174\021\178\018\174\015>\026$\000\000\018`\002\132\003\206\000\000\001\142\018\174\021\178\002\190\000\026\000\000\003\214\000\000\018N\018\174\003\216\000\000\021\178\018\174\015\208\001\218\000\000\003\142\018\174\0224\018\174\016b\024\214\024\150\005\140\000\000\002\020\018\174\0276\003v\018\174\016\244\005\140\000\000\000\000\000\000\000\000\018\174\021\178\018\174\000\000\000\000\000\000\004\016\024\150\000\000\017\134\018\024\021\178\000\000\000\000\000\000\026$\003\250\000\000\026\154\000\000\000\000\000D\001\242\000\000\001\210\028\192\004\002\000\000\004\026\003\170\004,\000\000\000\000\000\134\000+\003\194\0064\003 \
         \000\000\001\018\000\000\0005\018\174\026\192\003\216\000\000\b\210\000\000\001\242\001\210\000\134\000\000\003\206\0064\004\026\003\230\000\000\000\000\000\"\018\174\024\214\018\174\024\214\000\000\018\174\024\214\000\192\003\236\000\000\000\000\000\000\000\000\000\000\000\000\003\254\000\000\000\000\001^\000\000\000\000\000 \
         \000\000\000 \
         \000\000\0044\0014\003\240\0064\001\252\002\176\000+\002\220\018\174\026$\002\220\000\000\000\000\004\b\000\000\028\028\000+\004\004\0064\001\224\000\000\025\n\
         \007`\000\000\000\194\002\152\000\000\000\000\004v\004$\000\000\000\000\000\000\000\000\006\030\000+\000\000\000+\000\000\000+\004\020\0064\003 \
         \000\000\029\014\000\000\027\184\004\148\000\000\000\000\027\184\000\000\025X\002\164\006\176\000\000\0238\018\174\0238\003B\000\026\023\144\018\174\0224\023\192\018\174\022\182\000\000\027\244\000\026\000\000\000\000\0238\0238\018\174\000\000\0238\004\158\0238\018\174\0238\0238\018\174\0238\018\174\0238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004@\000\000\027\184\000\000\025X\004L\000\000"
      ),
      ( 16,
        "\000\189\000\006\000\189\002Y\000\189\000\189\002Y\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\n\
         \000\189\001\r\000\022\000\189\006\026\000\189\000\189\000\189\000\189\000\189\000\189\002\157\000\146\005\214\000\189\001\213\006\"\000\189\000\189\000\189\000\154\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\006r\000\226\0009\000\n\
         \000\189\000\189\000\134\000\189\000\189\005\134\000\189\000\189\000\189\000\189\004-\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\001\r\006S\006.\000\189\000\189\000\189\000\245\000\138\000\245\005\238\000\245\000\245\0066\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\002\030\000\245\000\022\001R\000\245\006\026\000\245\000\245\000\245\000\245\000\245\000\245\001\226\005\182\000\158\000\245\002\209\006\"\000\245\000\245\000\245\000\018\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\170\000\150\000\n\
         \000\142\000\245\000\245\002\254\000\245\000\245\001\025\000\245\000\245\000\245\000\245\001=\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\002\209\006*\006.\000\245\000\245\000\245\000\189\000\022\000\189\006\226\000\189\000\189\0066\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\n\
         \000\189\002\162\003\221\000\189\000:\000\189\000\189\000\189\000\189\000\189\000\189\001\205\000\214\001\189\000\189\002\153\000\n\
         \000\189\000\189\000\189\004V\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\001\137\003\221\000\162\003\221\000\189\000\189\003\173\000\189\000\189\003\173\000\189\000\189\000\189\000\189\004)\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\006f\003\221\000\166\000\189\000\189\000\189\003y\000\022\003y\000\174\003y\003y\002\170\003y\003y\003y\003y\003y\003y\003y\003y\006\206\003y\004\158\004!\003y\002^\003y\003y\003y\003y\003y\003y\000\190\005\138\000\201\003y\005\006\000\n\
         \003y\003y\003y\005\146\003y\003y\003y\003y\003y\003y\003y\003y\003y\001\190\004!\000A\004!\003y\003y\000A\003y\003y\000\253\003y\003y\003y\003y\003\165\003y\003y\003y\003y\003y\003y\003y\003y\003y\003y\003y\003y\000\145\004!\001.\003y\003y\003y\000\245\001v\000\245\002\201\000\245\000\245\003F\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\001v\000\245\004\146\001\194\000\245\002\165\000\245\000\245\000\245\000\245\000\245\000\245\000\181\000\250\006\150\000\245\001v\000\"\000\245\000\245\000\245\004\170\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000F\000J\000N\000R\000\245\000\245\000\n\
         \000\245\000\245\006\190\000\245\000\245\000\245\000\245\0019\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\000\245\001\026\003\014\002\225\000\245\000\245\000\245\002\237\001f\002\237\001n\001e\001e\003\233\002\237\001e\002\237\002\237\002\237\002\237\002\237\002\237\006\158\002\237\007*\005\198\002\237\001\178\002\237\001e\002\237\002\237\002\237\002\237\000\022\001\161\001\214\002\237\001\238\002.\002\237\002\237\001e\002>\001e\001e\001e\001e\001e\001e\002\237\001e\002\237\001\197\001\202\002F\001\197\001e\001e\001R\002\237\002\237\002R\002\237\002\237\002\237\002\237\001v\002\237\002\237\002\237\002\237\002\237\002\237\002\237\002\237\001e\002\237\002\237\002\237\002V\002f\002n\002\237\002\237\002\237\001\021\002\130\001\021\001v\001\021\001\021\002\186\001\021\001\021\001\021\001\021\001\021\001\021\001\021\001\021\007n\001\021\002\202\000\022\001\021\002\250\001\021\001\021\001\021\001\021\001\021\001\021\002\169\003j\004R\001\021\004\182\004\198\001\021\001\021\001\021\004\226\001\021\003\014\001\021\001\021\001\021\001\021\001\021\001\021\001\021\005\018\005J\005r\000\n\
         \001\021\001\021\005\154\001\021\001\021\005\162\001\021\001\021\001\021\001\021\005\166\001\021\001\021\001\021\001\021\001\021\001\021\001\021\001\021\001\021\001\021\001\021\001\021\005\170\005\190\005\227\001\021\001\021\001\021\001\145\006\002\001\145\006\015\000\022\000\026\006>\001\145\000\030\001\145\001\145\001\145\001\145\001\145\001\145\006[\001\145\006\130\006\138\001\145\006\183\001\145\000&\001\145\001\145\001\145\001\145\005\214\006\198\001\213\001\145\006\242\006\246\001\145\001\145\000\n\
         \007\"\000*\003\014\000.\000>\000B\002r\001\145\000\230\001\145\0072\007\182\007\255\001v\000\234\002v\b\018\001\145\001\145\000\000\001\145\001\145\001\145\001\145\000\000\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\002z\001\145\001\145\001\145\000\000\000\000\000\000\001\145\001\145\001\145\000I\000I\000I\000f\000\022\000j\000\000\000I\000\030\000I\000I\000I\000I\000I\000I\000\000\000I\000\000\000\000\000I\000\000\000I\000\000\000I\000I\000I\000I\000\000\000\000\000\000\000I\000\000\000\000\000I\000I\000\n\
         \000\000\000n\000\000\000r\000\000\000\000\000\182\000I\000\230\000I\000\000\000\000\000\000\000\000\000\234\000\238\000\000\000I\000I\000\000\000I\000I\000I\000I\000I\000I\000I\000I\000I\000I\000I\000I\000I\000\242\000I\000I\000I\000\000\000\000\000I\000I\000I\000I\003)\000\000\003)\000f\000\022\000j\000\000\003)\000\030\003)\003)\003)\003)\003)\003)\000\000\003)\000\000\000\000\003)\000\000\003)\000\000\003&\003)\003)\003)\000\000\000\000\000\000\003)\000\000\000\000\003)\003)\000\n\
         \000\000\000n\000\000\000\178\000\000\000\000\000\182\003)\000\230\003)\000\000\000\000\000\000\000\000\000\234\000\238\000\000\003)\003)\000\000\003)\003)\003)\003)\000\000\003)\003)\003)\003)\003)\003)\003)\003)\000\242\003)\003)\003.\003-\000\000\003-\003)\003)\003)\007\n\
         \003-\000\000\003-\003-\003-\003-\003-\003-\000\022\003-\000\000\007\018\003-\000\000\003-\000\000\003-\003-\003-\003-\000\000\001V\001^\003-\000\000\000\000\003-\003-\000\n\
         \000\000\000\000\007\026\007.\0021\000\000\000\000\003-\000\000\003-\000\n\
         \000\000\000\000\0021\001Z\0021\0021\003-\003-\000\000\003-\003-\003-\003-\000\000\003-\003-\003-\003-\003-\003-\003-\003-\000\000\003-\003-\003.\003Q\000\000\003Q\003-\003-\003-\007\n\
         \003Q\000\000\003\030\003Q\003Q\003Q\003Q\003Q\000\000\003Q\000\000\007\018\003Q\0021\003r\000\000\003&\003z\003\182\003\190\000\000\000\000\0021\003Q\001M\0021\003\198\003\222\000\n\
         \000\000\0021\007\026\007:\002\193\0021\0021\003Q\000\000\003Q\000\000\000\000\000\000\002\193\000\000\002\193\002\193\003Q\003\206\000\000\003Q\003Q\003Q\003Q\000\000\003Q\003Q\003Q\003Q\003\214\001R\003Q\003Q\000\000\003\230\003Q\003.\003\005\000\000\003\005\003\254\003\238\003\246\000\000\003\005\000\000\003\030\003\005\003\005\003\005\003\005\003\005\000\000\003\005\000\000\000\134\003\005\002\193\003r\000\000\003&\003z\003\182\003\190\000\000\000\000\001J\003\005\000\000\001R\003\198\003\005\000\000\000\000\002\193\000\000\000\000\002)\001\226\002\193\003\005\000\000\003\005\000\000\000\000\000\000\002)\000\n\
r\000\000\003&\003z\003\182\003\190\000\000\000\000\000\000\003Y\000\000\001U\003\198\003\222\000\000\000\000\002M\000\000\000\000\000\000\000\000\000\000\003Y\000\000\003Y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003Y\003\206\000\000\003Y\003Y\003Y\003Y\000\000\003Y\003Y\003Y\003Y\003\214\001R\003Y\003Y\000\000\003\230\003Y\003.\003!\000\000\003!\003\254\003\238\003\246\000\000\003!\000\000\003\030\003!\003!\003!\003!\003!\000\000\003!\000\000\000\000\003!\005\182\003!\000\000\003&\003z\003!\003!\000\000\000\000\000\000\003!\000\000\000\000\003!\003!\001\233\000\000\001\233\000\000\000\000\000\000\000\000\000\000\003!\000\000\003!\000\000\001\233\000\000\000\000\000\000\000\000\000\000\003!\003!\000\000\003!\003!\003!\003!\000\000\003!\003!\003!\003!\003!\003!\003!\003!\000\000\003!\003!\003.\003\021\000\000\003\021\003!\003!\003!\000\000\003\021\000\000\003\030\003\021\003\021\003\021\003\021\003\021\000\000\003\021\000\000\000\000\003\021\000\000\003\021\000\000\003&\003z\003\182\003\190\000\000\000\000\000\000\003\021\000\000\000\000\003\198\003\021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\021\000\000\003\021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\021\003\206\000\000\003\021\003\021\003\021\003\021\000\000\003\021\003\021\003\021\003\021\003\214\003\021\003\021\003\021\000\000\003\021\003\021\003.\003\029\000\000\003\029\003\021\003\021\003\021\000\000\003\029\000\000\003\030\003\029\003\029\003\029\003\029\003\029\000\000\003\029\000\000\000\000\003\029\000\000\003\029\000\000\003&\003z\003\182\003\190\000\000\000\000\000\000\003\029\000\000\000\000\003\198\003\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\029\000\000\003\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\029\003\206\000\000\003\029\003\029\003\029\003\029\000\000\003\029\003\029\003\029\003\029\003\214\003\029\003\029\003\029\000\000\003\029\003\029\003.\003\025\000\000\003\025\003\029\003\029\003\029\000\000\003\025\000\000\003\030\003\025\003\025\003\025\003\025\003\025\000\000\003\025\000\000\000\000\003\025\000\000\003\025\000\000\003&\003zz\003\182\0031\000\000\000\000\000\000\0031\000\000\000\000\0031\0031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0031\000\000\0031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0031\0031\000\000\0031\0031\0031\0031\000\000\0031\0031\0031\0031\003\214\0031\0031\0031\000\000\0031\0031\003.\003\001\000\000\003\001\0031\0031\0031\000\000\003\001\000\000\003\030\003\001\003\001\003\001\003\001\003\001\000\000\003\001\000\000\000\000\003\001\000\000\003r\000\000\003&\003z\003\182\003\190\000\000\000\000\000\000\003\001\000\000\000\000\003\198\003\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\001\000\000\003\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\001\003\206\000\000\003\001\003\001\003\001\003\001\000\000\003\001\003\001\003\001\003\001\003\214\003\001\003\001\003\001\000\000\003\230\003\001\003.\003\t\000\000\003\t\003\254\003\238\003\246\000\000\003\t\000\000\003\030\003\t\003\t\003\t\003\t\003\t\000\000\003\t\000\000\000\000\003\t\000\000\003r\000\000\003&\003z\003\182\003\190\000\000\000\000\000\000\003\t\000\000\000\000\003\198\003\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\t\000\000\003\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\t\003\206\000\000\003\t\003\t\003\t\003\t\000\000\003\t\003\t\003\t\003\t\003\214\003\t\003\t\003\t\000\000\003\230\003\t\003.\003\r\000\000\003\r\003\t\003\238\003\246\000\000\003\r\000\000\003\030\003\r\003\r\003\r\003\r\003\r\000\000\003\r\000\000\000\000\003\r\000\000\003\r\000\000\003&\003z\003\182\003\190\000\000\000\000\000\000\003\r\000\000\000\000\003\198\003\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\r\000\000\003\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\r\003\206\000\000\003\r\003\r\003\r\003\r\000\000\003\r\003\r\003\r\003\r\003\214\003\r\003\r\003\r\000\000\003\r\003\r\003.\003\017\000\000\003\017\003\r\003\238\003\246\000\000\003\017\000\000\003\030\003\017\003\017\003\017\003\017\003\017\000\000\003\017\000\000\000\000\003\017\000\000\003\017\000\000\003&\003zr\000\000\003&\003zr\000\000\003&\003z\003\182\003\190\000\000\000\000\000\000\003U\000\000\000\000\003\198\003\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003U\000\000\003U\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003U\003\206\000\000\003U\003U\003U\003U\000\000\003U\003U\003U\003U\003\214\003U\003U\003U\000\000\003\230\003U\003.\003=\000\000\003=\003\254\003\238\003\246\000\000\003=\000\000\003\030\003=\003=\003=\003=\003=\000\000\003=\000\000\000\000\003=\000\000\003r\000\000\003&\003z\003\182\003\190\000\000\000\000\000\000\003=\000\000\000\000\003\198\003\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003=\000\000\003=\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003=\003\206\000\000\003=\003=\003=\003=\000\000\003=\003=\003=\003=\003\214\001R\003=\003=\000\000\003\230\003=\003.\003A\000\000\003A\003\254\003\238\003\246\000\000\003A\000\000\003\030\003A\003A\003A\003A\003A\000\000\003A\000\000\000\000\003A\000\000\003r\000\000\003&\003z\003\182\003\190\000\000\000\000\000\000\003A\000\000\000\000\003\198\003\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003A\000\000\003A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003A\003\206\000\000\003A\003A\003A\003A\000\000\003A\003A\003A\003A\003\214\001R\003A\003A\000\000\003\230\003A\003.\003E\000\000\003E\003\254\003\238\003\246\000\000\003E\000\000\003\030\003E\003E\003E\003E\003E\000\000\003E\000\000\000\000\003E\000\000\003r\000\000\003&\003zr\000\000\003&\003zz\003\182\003\190\000\000\000\000\000\000\002\241\000\000\000\000\003\198\002\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\241\000\000\002\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\241\003\206\000\000\002\241\002\241\002\241\002\241\000\000\002\241\002\241\002\241\002\241\003\214\002\241\002\241\002\241\000\000\002\241\002\241\003.\002\245\000\000\002\245\002\241\002\241\002\241\000\000\002\245\000\000\003\030\002\245\002\245\002\245\002\245\002\245\000\000\002\245\000\000\000\000\002\245\000\000\002\245\000\000\003&\003zn\
         \000b\000*\000\245\000.\000>\000B\002r\000\000\000\230\000\000\002\138\000\000\002\142\002\190\000\234\002v\002\194\0011\0019\000\000\0011\0011\000\000\003\018\0019\0011\0011\000\000\000\000\000\000\000\000\000\000\0011\002z\000\000\000\000\000\n\
         \000\253\001.\000\253\000\253\000\253\000\000\000\"\000\253\000\000\000\253\000\000\000\253\000\253\000\253\000\000\000\253\000\000\000\000\000\253\000z\000F\000J\000N\000R\001\129\000\000\000\000\001\129\000\000\000\253\001\129\000\000\000\000\000\000\000\253\000\130\000\253\000\000\000\253\000\000\000\000\000\253\000\000\000\253\000\000\000\000\000\000\000\000\000\000\000\253\000\253\002J\000\253\000\253\000\000\000\253\000\253\002N\000\000\000\253\000\253\000\253\000\253\000\000\000\253\000\253\000\022\000\253\000\253\000\000\000\253\000\000\000\000\001.\000\253\000\253\000q\000\000\000q\000q\000q\000\000\000\000\000q\000\000\000q\000\000\000q\000q\000q\000\000\000q\000\000\000\000\000q\000\000\000\000\000\n\
         \000\000\000*\000\000\002\134\000>\000B\002r\000q\000\000\000\000\000\000\000\000\000q\000\000\000q\000\000\000q\000\000\000\000\000q\000\000\000q\000\000\000\000\000\000\000\000\000\000\000q\000q\000\000\000q\000q\000\000\000q\000q\000\000\000\246\000\000\000q\000q\000q\000\000\000q\000q\000\000\000q\000q\002\r\000q\002\r\002\r\002\r\000q\000q\002\r\000\000\002\r\000\000\002\r\002\r\002\r\000\000\002\r\000\000\000\000\002\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\r\000\000\000\000\000\000\000\000\002\r\000\000\002\r\000\000\002\r\000\000\000\000\002\r\000\000\002\r\000\000\000\000\000\000\000\000\000\000\002\r\002\r\000\000\002\r\002\r\000\000\002\r\002\r\000\000\000\000\001\242\002\r\002\r\002\r\000\000\000\000\002\r\000\000\002\r\002\r\000\000\002\r\000\000\000\022\000\026\002\r\002\r\000\030\000\"\000\000\000\000\0002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0006\000F\000J\000N\000R\000V\000Z\000\000\000\000\000\000\000^\000\000\000\000\000\n\
         \000b\000*\000\130\000.\000>\000B\002r\000\000\000\230\000\000\002\138\000\000\002\142\002\190\000\234\002v\002\194\000\000\002J\000\000\002^\002]\002]\000\000\002N\002]\002]\000\000\000\000\000\201\000\000\000\000\000\000\002z\000\000\000\000\000\000\000\000\001.\002]\002]\002]\002]\002]\002]\002]\000\000\000\000\000\000\002]\000\000\000\000\002]\002]\002]\000\000\002]\002]\002]\002]\000\000\002]\000\000\002]\002\217\002]\002]\002]\002]\002]\000\000\004r\000\000\003\030\003\169\004\006\002\217\003\169\002\217\000\000\002\217\000\000\000\000\002\217\000\000\003r\002]\003&\003z\003\182\003\190\002]\000\000\000\000\002\217\000\000\000\000\003\198\003\222\000\000\000\000\000\000\0019\000\000\000\000\000\000\0019\000\000\000\000\004\206\000\000\0019\000\000\0019\0019\000\000\000\000\002\217\003\206\000\000\002\217\002\217\004z\000\000\000\000\002\217\002\217\0056\005^\003\214\001R\0019\002\217\0019\003\230\000\000\003.\0019\003\030\000\000\003\254\003\238\003\246\002y\000\000\002y\000\000\000\000\002y\000\000\003r\000\000\003&\003z\003\182\003\190\0019\000\000\0019\002y\000\000\000\000\003\198\003\222\000\000\0019\000\000\000\000\001\170\000\000\000\000\000\000\000\000\000\000\004\234\000\000\000\000\000\000\0019\000\000\000\000\000\000\002y\003\206\000\000\002y\002y\000\000\000\000\000\000\002y\002y\000\000\000\000\003\214\001R\000\000\002y\000\000\003\230\002y\003.\000\000\003\030\000\000\003\254\003\238\003\246\002}\000\000\002}\000\000\000\000\002}\000\000\003r\000\000\003&\003z\003\182\003\190\000\000\000\000\004\017\002}\000\000\000\000\003\198\003\222\000\000\000\000\000\000\000\000\000\000\004\017\004\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002}\003\206\000\000\002}\002}\004\017\000\000\004\017\002}\002}\000\000\000\000\003\214\001R\000\000\002}\000\000\003\230\002}\003.\000\000\003\030\000\000\003\254\003\238\003\246\007b\000\000\007j\000\000\004\017\007\162\004\017\003r\000\000\003&\003z\003\182\003\190\004\017\000\000\000\000\007\166\000\000\000\000\003\198\003\222\000\000\000\000\000\000\000\000\000\000\001v\000\000\000\000\000\000\000\000\000\000\000\000\000f\000\022\000j\000\000\000\000\000\030\007\178\003\206\000\000\0045\007\186\002\133\000\000\002\133\007\194\007\198\002\133\000\000\003\214\001R\000\000\007\206\000\000\003\230\000\000\003.\000\000\002\133\000\000\003\254\003\238\003\246\000\n\
         \000\000\000n\002\129\000\178\002\129\000\000\000\182\002\129\000\230\000\000\000\000\000\000\000\000\000\000\000\234\000\238\000\000\002\133\002\129\000\000\002\133\002\133\000\000\000\000\001\242\002\133\002\133\002\r\000\000\000f\000\022\000j\002\133\000\242\000\030\002\133\002\r\000\000\002\r\002\r\007v\002\129\000\000\000\000\002\129\002\129\000\000\000\000\000\000\002\129\002\129\000\000\000\000\000\000\000\000\000\000\002\129\000\000\000\000\002\129\000\000\000\n\
         \000\000\000n\007\130\001\002\000\000\000\000\000\182\000\000\000\230\000\000\000\000\000\000\000\000\000\000\000\234\000\238\000\000\000\000\002\r\000\000\000\000\000\000\000\000\000\000\001\242\000\000\000\000\002\r\000\000\002\r\002\r\000\000\000\000\000\242\000\000\002\r\000f\000\022\000j\002\r\002\r\000\030\000\"\000\000\000\000\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\000F\000J\000N\000R\000\000\000\000\000\000\000\000\000\000\004\246\000\000\006\026\000\n\
         \000\000\000n\000\130\000\178\000\000\003\030\000\182\004\030\000\230\000\000\006\"\000\000\000\000\000\000\000\234\000\238\000\000\003r\002J\003&\003z\003\182\003\190\000\000\002N\000\000\000\000\004\021\000\000\003\198\003\222\000\"\000\000\000\242\001)\004\250\000\000\000\000\004\021\004\021\000\000\000\000\000\000\000\000\000z\000F\000J\000N\000R\000\000\003\206\000\000\006*\006.\000\000\000\000\004\021\000\n\
         \004\021\005.\006\214\003\214\001R\0066\000\000\000\000\003\230\000\245\003.\000\000\000\129\000\000\003\254\003\238\003\246\000\245\002J\000\245\000\000\000\245\000\245\004\021\002N\004\021\000\129\000\129\000\129\000\129\000\000\000\000\004\021\000\245\000\000\000\000\000\000\003\030\000\245\004\014\000\000\000\245\000\245\000\000\000\000\001v\000\000\000\000\000\000\003r\000\000\003&\003z\003\182\003\190\000\000\000\245\002\145\000\000\000\245\000\245\003\198\003\222\000\000\000\245\000\245\002\145\000\000\000\000\000\000\000\000\000\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\206\000\000\000\000\000\000\000\000\004\018\000\000\000\000\000\000\000\000\000\000\003\214\001R\003\030\000\000\004*\003\230\000\000\003.\000\000\000\000\000\000\004\"\003\238\003\246\003r\000\000\003&\003z\003\182\003\190\000\000\003\030\000\000\000\000\004\134\000\000\003\198\003\222\000\000\000\000\000\000\000\000\000\000\003r\000\000\003&\003z\003\182\003\190\000\000\000\000\000\000\000\000\000\000\000\000\003\198\003\222\003\206\000\000\000\000\000\000\000\000\002\253\000\000\000\000\003\225\000\000\000\000\003\214\002\253\000\000\000\000\000\000\003\230\000\000\003.\003\206\000\000\003\225\003\254\003\238\003\246\000\000\000\000\000\000\005.\000\000\003\214\001R\000\000\003\030\000\000\003\230\004F\003.\000\000\000\000\000\000\003\254\003\238\003\246\000\000\003r\000\000\003&\003z\003\182\003\190\000\000\003\030\000\000\000\000\000\000\000\000\003\198\003\222\000\000\000\000\000\000\000\000\000\000\003r\000\000\003&\003z\003\182\003\190\000\000\000\000\000\000\000\000\000\000\000\000\003\198\003\222\003\206\000\000\005{\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\214\001R\000\000\000\000\000\000\003\230\000\000\003.\003\206\000\000\001\217\003\254\003\238\003\246\000\000\000\000\000:\000\022\000\026\003\214\001R\000\030\003\030\000\000\003\230\001\189\003.\000\000\000\000\000\000\003\254\003\238\003\246\000\000\003r\000&\003&\003z\003\182\003\190\000\000\000\000\000\000\000\000\000\000\000\000\003\198\003\222\000\n\
         \000\000\000*\000\000\000.\000>\000B\002r\000\000\000\230\000\000\000\000\000\000\000\000\000\000\000\234\002v\000\000\000\000\003\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\214\001R\000\000\000\000\002z\003\230\007\n\
         \003.\000\000\000\000\000\000\000\185\003\238\003\246\001\005\000\000\001\005\000\000\007\018\001\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\005\000f\000\022\000j\000\000\000\n\
         \000\030\000\000\007\026\007:\001!\000\000\000\000\000\000\002\177\000\000\002\177\000\000\000\000\002\177\000\000\000\000\000\000\001\005\000\000\000\000\001\005\001\005\000\000\000\000\002\177\001\005\001\005\000\n\
         \001\221\000n\001\221\000\178\001\005\001\221\000\182\000\000\000\230\000\000\000\000\000\000\000\000\000\000\000\234\000\238\001\221\000\000\000\000\002\177\000\000\000\n\
         \002\177\002\177\006\190\006\210\000\000\002\177\002\177\000\000\001\153\000\000\000\000\000\242\002\177\000\000\000\000\007\146\000\000\001\221\001\153\004\t\001\221\001\221\000\000\000\022\000\000\001\221\001\221\000\000\001\130\004\001\004\t\004\t\001\221\000\022\000\000\000\000\000\000\000\000\001\142\000\000\004\001\004\001\000\000\000\000\000\000\000\000\000\000\000\000\004\t\000\000\004\t\000\000\000\000\000\000\000\n\
         \000\"\000\000\000\000\004\001\000\000\004\001\000\000\000\000\000\000\000\n\
         \000\000\000\000\000\000\000z\000F\000J\000N\000R\004\t\000\000\004\t\000\000\000\000\000\000\000\000\000\000\000\000\004\t\004\001\000\130\004\001\005\150\005\158\000\000\000\000\004\r\000\000\004\001\000\000\000\"\004\t\000\000\0072\000\000\000\000\002J\004\r\004\r\000\000\000\000\004\001\002N\000z\000F\000J\000N\000R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\r\000\000\004\r\000\000\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002J\000\000\000\000\000\000\000\000\004\r\002N\004\r\000\000\000\000\000\000\000\000\000\000\000\000\004\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001v"
      ) )

  and lhs =
    ( 8,
      "\004\003\002\001\000tsrqppoonmmllkjihgfeddddcbaaaaa``__^^^]]\\\\[[ZYYYYYYYYYYXWWVVUUTTSRRQQPPOONNMMLKJIHGFEDCBBBBAA@@??>>==<<<<<;;::9988776554333211111111100//////.--,,+**))('&&&&%%$$###\"\"\"!!  \
       \031\031\030\030\029\029\028\028\027\027\026\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\024\023\023\023\023\023\023\022\022\022\022\022\022\022\021\020\020\020\019\019\018\018\018\018\018\018\018\018\018\018\017\017\016\015\015\014\014\014\014\014\r\r\012\012\012\012\012\011\n\
       \t\b\b\007\006\006\006\006\006\006\006\006\006\006\005\005\005" )

  and goto =
    ( ( 16,
        "\000\219\000\135\000\000\000\000\0050\000\000\000\000\000\000\000\000%t\000\000\000\017\000\000%t\000\000\000\000\005\216\000\000\000\000\000\000\000\000\006\128\007(\002\144$\156\000\000\000\000\000\000%|\000\000\000%\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000t\002\244\000\000\000Z\000\000\000\000\000\000\000\000\000\000\0042\000\000\000\000\005\012\000\000\000\000\000\000\000\000\000\000\000\000\002B\001 \
         \000\000\000\000\000\000\000\000\000\000\bT\000M\000\000\000\000\000U\000\000\000\000\000O\000\000\000\000\000\000\000M\007\172\000\000\003\002\000\000\000J\000#\000\000\001\150\000\000\002L\000\000\003\138\000\000\000`\004\218\000\000\000`\004\222\000\000\000\000\000\000\000\000\000\000\000\000\004\236\000\000\005\148\000\000\000\000\000\000\000\007\000\000\000\240\000\000\000\000\0012\000\000\000`\000\131\000\000\000\000\000\000\000Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000M\006`\000\000\000\000\000\000\005\180\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\208$,\000\000\000\000\000\000\002\198\0038\bx\b\252\000\000\t\164\000\000\000*\006\208\000`\006\216\000\000\000\000\000\000\t \
         \000\000\000\000\000\000\002\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\018\003\224\000\000\000\000$\192\t\200\n\
         p\000\000\000\129\011\024\000\129\011\192\000\129\012h\000\129\000\000\001\156\000\000\000\000\000\168\000\000\000~\000\000\000\000\000}\000\000\000\000\000\000\r\016\000\129\r\184\000\129\014`\000\129\000\000\015\b\000\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\176\000\129\016X\000\129\017\000\000\129\017\168\000\129\018P\000\129\018\248\000\129\019\160\000\129\020H\000\129\020\240\000\129\021\152\000\129\022@\000\129\000\000\000\129\000\000\022\232\000\000\000\129\000\000\023\144\000\129\000\000\000\000\000\000\000\000%\012\000\000\000\129\000\000\000\000\000\000\001\224\000j\000\000\000\000\000\000\000\000\000\129\000\129\0248\000\129\024\224\000\129\000\129\000\000\000\000\000\000\001\006\000\000\000\000\025\136\000\129\000\000\006(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\0260\000\129\000\000\000\000\000\000\026\216\000\129\027\128\000\129\000\129#<\002l\000\000\000\000\028(\000\129\000\000\028\208\000\129\003\188\000\000\000\000\000\000\000\000\000\152\000\129\004\136\000\000\000\000\000\000\000\000#\210\000\000\000\129\000\129\000\129\000\000\000\000\000\000\000\129\000\000\000\000\000\129\000\000\000\000\0002\000:\000\000\000\137\000j\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\204\001\028\000\000\0072\000\000\000\000\001V\000\000\001\006\029x\000\129\000\000\000\000\001v\000\000\000\164\000\002\000\236\000\000\000\000\007\130\001\026\000\000\000\000\000\000\001D\030 \
         \000\129\030\200\000\222\000\000\031p\001\160\001\158\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\000\001f\000\000\001\140\000\000\000\000\001\148\000\000\b\"\000\000\001\128\001\b\000\192 \
         \024\000\129\002r\000\000\000\000\000\000\000\000\000F\001&\000\000\b4\000\000\000\000\007\160\001&\000\000\000\000\000\230\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\016\0016\000\000\001P\000\000\001x\000\000\b\202\000\000\000\000\000j\000\000\001\132\000\000\000\000\000\000\001\198\000\000\000\000\001\190\000A\000\000\002@ \
         \192\002\026\000\003\000,\001\154!h\000\129\000\000\"\016\000\129\000\000\000\000\000<\000\000\000\000\002J\002^\001@\000\000\002\128\000\000\002\156\"\184\002\030\002\158\001\232\002\162#`\002~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0026\000\000\000\000\000\000\000\000"
      ),
      ( 16,
        "\000\178\000\187\001\143\000\216\001`\000/\0003\001\221\0003\000r\000\188\000`\000\189\000\190\000\193\000\194\000\195\000\198\001[\001l\000\184\001\155\001\024\000\004\000u\000K\001m\001\156\000K\001\148\001\221\0003\001\231\000\207\000\225\000\226\000f\001\228\001\221\0003\001\191\000 \
         \001\192\000\206\000M\000/\0003\000O\000\215\000o\000z\000`\001\019\000\217\0001\001\227\000/\0003\001\209\000\229\001\228\000\230\000\231\001\230\001\193\001\215\000@\0003\001\228\000I\000\232\001\184\001\194\000Y\000N\000g\000f\000N\000\174\000\183\000\184\000\153\000\233\000\234\000\178\000\187\0017\000j\001l\000\184\001\216\001\024\000\235\001\\\000\188\001~\000\189\000\190\000\193\000\194\000\195\000\198\001M\000\145\001P\000\132\000\133\000D\000\236\000E\000F\001\232\001\170\000\151\000\211\000g\000N\000\207\000\225\000\226\001\133\000\213\002\001\000\184\000\209\002\003\000i\000j\000/\0003\000\135\000\139\000r\000J\000`\0002\000\228\001d\000h\000/\0003\002\004\000\153\000\229\001\186\000\230\000\231\000t\000K\000\212\001$\001\184\000@\0003\000\232\001u\001z\001\172\000P\000f\000\142\000/\0003\000\183\000\184\001&\000\233\000\234\000\178\000\187\000\214\001\127\001z\000Q\000K\000B\000\235\001\143\000\188\001Q\000\189\000\190\000\193\000\194\000\195\000\198\001M\001x\001\235\001\158\001}\000C\000\236\000D\000\215\000E\000F\001\131\000g\000\217\001\128\000\207\000\225\000\226\001\147\001\187\001o\001\173\001\158\001'\000j\000/\0003\000~\0003\000[\000R\000`\000\206\000J\000\228\000h\001\167\001\206\000\184\000{\001\212\000\229\001\150\000\230\000\231\000w\001s\001\213\000K\001t\000\208\001\177\000\232\001\236\001{\001z\000f\000h\000P\001\196\000\209\000\183\000\184\0001\000\233\000\234\000\178\000\187\000D\001\152\000\165\001\224\001\198\000Q\000\235\001s\000\188\001\165\000\189\000\190\000\193\000\194\000\195\000\198\001M\000\212\001\235\001\143\001\143\001\254\000\236\001\249\001\200\001\208\000J\000g\001\159\001\214\001\209\000\207\000\225\000\226\001\160\001\162\000\184\001\210\001\024\000j\001\255\000K\000K\000~\0003\001\253\001\145\001\146\000/\0003\000\228\000P\000]\001\160\000`\001\252\000\218\000\229\001\211\000\230\000\231\000\206\000\215\001\209\000@\0003\000Q\000\217\000\232\001\243\001\210\001\246\001\251\001\023\000\184\001\170\001\024\000\183\000\184\000f\000\233\000\234\000\178\000\187\000\127\000\128\001\250\001\248\001@\001\247\000\235\000\000\000\188\000\000\000\189\000\190\000\193\000\194\000\195\000\198\001=\000\130\001A\000\132\000\133\000D\000\236\000E\000F\000\129\000\180\000\000\000\000\000\000\002\002\000\207\000\225\000\226\000g\001\209\001\171\000\000\000\206\000\181\000\206\000K\001\210\000\134\000\135\000\139\000j\000J\000/\0003\000\228\000P\000\000\000\000\000\180\000/\0003\000\229\000\000\000\230\000\231\000x\000K\000\000\001D\000\000\000Q\000\181\000\232\000\000\000\000\000\000\000P\000\000\000\142\0004\000\000\000\183\000\184\000\000\000\233\000\234\000\178\000\187\0005\000\182\000f\000Q\000\206\000\000\000\235\001R\000\188\000\000\000\189\000\190\000\193\000\194\000\195\000\198\001!\000\000\000\000\000\000\000\183\000\184\000\236\001#\000\186\000\000\000\000\000\000\000\000\000\182\000\000\000\207\000\225\000\226\0008\000\000\000\000\000\000\000\000\000/\0003\000g\000\000\000_\000\000\000`\000h\000\000\000\183\000\184\001\019\000\185\000\186\000h\000\143\000\000\000\000\000\229\000\000\000\230\000\231\000\000\000\000\000\000\000@\0003\000\000\000\000\000\232\000\000\000f\000\000\000\000\000\000\000\000\000\000\000\000\000\183\000\184\000\153\000\233\000\234\000\178\000\187\000\000\000\000\000\000\000\000\001H\000\000\000\235\000\000\000\188\000\000\000\189\000\190\000\193\000\194\000\195\000\198\001\017\000\130\001A\000\132\000\133\000D\000\236\000E\000F\000g\000\000\000\000\000\000\000\000\000\000\000\207\000\225\000\226\000\000\000\000\000\000\000jh\000\000\000/\0003\000/\0003\000\000\000b\000c\000e\000c\000/\0003\000\228\000\000\000l\000\000\000`\000\000\000\000\000\229\000\000\000\230\000\231\000\000\000\000\000\000\000@\0003\000\000\000\000\000\232\000\000\000f\000\000\000f\000\000\000\000\000\000\000\000\000\183\000\184\000f\000\233\000\234\000\178\000\187\000\000\000\000\000\000\000\000\000\000\000\000\000\235\000\000\000\188\000\000\000\189\000\190\000\193\000\194\000\195\000\198\001^\000\130\000\131\000\132\000\133\000D\000\236\000E\000F\000g\000\000\000g\000\000\000\000\000\000\000\207\000\225\000\226\000g\000\000\000\000\000h\000\000\000h\000\000\000\000\000\000\000\134\000\135\000\139\000j\000J\000/\0003\000\228\000\000\000n\000\000\000`\000\000\000\000\000\229\000\000\000\230\000\231\000\000\000K\000\000\000@\0003\000\000\000\000\000\232\000\000\000\000\000\000\000P\000\000\000\142\000\000\000\000\000\183\000\184\000f\000\233\000\234\000\178\000\187\000\000\000\000\000\000\000Q\000\000\000\000\000\235\000\000\000\188\000\000\000\189\000\190\000\193\000\194\000\195\000\198\001W\000\130\000\141\000\132\000\133\000D\000\236\000E\000F\000\000\000\000\000\000\000\000\000\000\000\000\000\207\000\225\000\226\000g\000\000\000\000\000\000\000/\0003\000\000\000\000\000\000\000\134\000\135\000\139\000jh\000\000\000/\0003\000\000\000\000\000/\0003\000\170\001-\000R\000\172\000c\000J\000\228\000\000\000\000\000\000\000\000\000\000\000\000\000\229\000\000\000\230\000\231\000\000\000\000\000\000\000K\000\000\000\000\000\000\000\232\000f\000\000\001\020\0003\000f\000P\000\000\000\000\000\183\000\184\000\138\000\233\000\234\000\178\000\187\000\000\000\000\000\000\000/\0003\000Q\000\235\001q\000\188\000`\000\189\000\190\000\193\000\194\000\195\000\198\001U\000\000\000\000\000\000\000\000\000\000\000\236\000\000\000g\000\000\000\000\000\000\000g\000\000\000\000\000\207\000\225\000\226\000f\000\000\000h\000\000\000\000\000\000\000h\000\000\000\173\000/\0003\000\000\000\000\001\130\000\000\000`\000\228\000\000\000\000\000\000\000\000\000\000\001\025\000\229\000\000\000\230\000\231\000\000\000\000\000\000\000@\0003\001\026\000\184\000\232\001\024\000\000\000\000\000\000\000g\000f\000\000\000\000\000\183\000\184\001\183\000\233\000\234\000\178\000\187\000\000\000j\001\184\000T\000\000\000\000\000\235\000\000\000\188\000\000\000\189\000\190\000\193\000\194\000\195\000\198\0013\000\000\000\000\000C\000\000\000D\000\236\000E\000F\000\000\000\151\000\000\000\000\000g\000\000\000\207\000\225\000\226\000\000\000\000\000\000\000\000\000\000\000/\0003\000j\000\000\001\164\000R\000`\001\188\000J\000/\0003\000\228\000\000\001\179\000\000\000`\000\153\001\187\000\229\000\000\000\230\000\231\000\000\000K\000\000\000@\0003\000\000\000\000\000\232\000\000\000f\000\000\000P\000\000\000\000\000\000\000\000\000\183\000\184\000f\000\233\000\234\000\178\000\187\000\000\000\000\000\000\000Q\000\000\000\000\000\235\000\000\000\188\000\000\000\189\000\190\000\193\000\194\000\195\000\198\001\028\000\000\000\000\000C\000\000\000D\000\236\000E\000F\000g\000\000\000\000\000\000\000\000\000\000\000\207\000\225\000\226\000g\000\000\000\000\000j\000\000\000/\0003\000\000\000\000\001\202\000H\000`\000j\000J\000\000\000\000\000\228\000\000\000\000\000\000\000\000\000\000\000\000\000\229\000\000\000\230\000\231\000\000\000K\000\000\000~\0003\000\000\000\000\000\232\000\000\000f\000\000\000P\000\000\000\000\000\000\000\000\000\183\000\184\000\000\000\233\000\234\000\178\000\187\000\000\000\000\000\000\000Q\000\000\000\000\000\235\000\000\000\188\000\000\000\189\000\190\000\193\000\194\000\195\000\198\001\027\000\000\000\000\000\000\000\000\000D\000\236\000\165\000\166\000g\000\000\000\000\000\000\000\000\000\000\000\207\000\225\000\226\000\168\000\000\000\000\000j\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000J\000\000\000\000\000\228\000\000\000\000\000\000\000\000\000\000\000\000\000\229\000\000\000\230\000\231\000\000\000K\000\000\000~n\

wr\0011\000\235\000\130\000\155\000\132\000\133\000D\000\000\000E\000F\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\225\000\000\000\000\000\000\000\178\000\187\000\000\000\000\000\000\000\000\000\000\000\134\000\135\000\139\000\188\000J\000\189\000\190\000\193\001\012\001\r\001\014\000\000\000\000\000\000\000\229\000\000\000\230\0016\000\000\000K\000\000\000\000\000\000\000\000\000\000\000\232\000\000\000\225\000\000\000P\001\015\000\142\000\000\000\000\000\183\000\184\000\000\000\233\000\234\000\000\000\000\000\000\000\000\0018\000Q\000\178\000\187\000\235\001\016\000@\0003\000\000\000\229\000\000\000\230\000\188\000\000\000\189\001Y\000\193\001\012\001Z\000\000\000\232\000\000\000\000\000\000\000\000\001\015\000\000\000\000\000\000\000\183\000\184\000\000\000\233\000\234\000\000\000\000\000\225\000\000\000\000\000\000\000\000\000\000\000\235\000\145\000\000\000\132\000\133\000D\000\000\000E\000F\000\000\000\000\000 \
         \000\000\000\000\000\000\000\000\000\151\000\000\000\000\000\229\000\000\000\230\000\000\000\000\000\000\000\000\000\000\000\000\000\135\000\139\000\232\000J\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\183\000\184\000\000\000\233\000\234\000\000\000\153\000K\000\000\000\000\000\000\000\000\000\000\000\235\000\000\000\000\000\000\000P\000\000\000\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q"
      ) )

  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : string list = Obj.magic _2 in
        let _1 : Uast.Preid.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.Preid.t =
          List.fold_left (fun acc s -> Preid.add_attr acc s) _1 _2
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : string list = Obj.magic _2 in
        let _1 : Uast.Preid.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.Preid.t =
          List.fold_left (fun acc s -> Preid.add_attr acc s) _1 _2
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = id;
                      MenhirLib.EngineTypes.startp = _startpos_id_;
                      MenhirLib.EngineTypes.endp = _endpos_id_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let t : Uast.term = Obj.magic t in
        let _3 : unit = Obj.magic _3 in
        let id : Uast.Preid.t = Obj.magic id in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          ({ ax_name = id; ax_term = t; ax_loc = mk_loc _loc; ax_text = "" }
            : Uast.axiom)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xl;
          MenhirLib.EngineTypes.startp = _startpos_xl_;
          MenhirLib.EngineTypes.endp = _endpos_xl_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let xl : (Uast.qualid * (Uast.pattern * Uast.term) option) list =
          Obj.magic xl
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xl_ in
        let _endpos = _endpos_xl_ in
        let _v =
          let _1 = None in
          (xl : (Uast.qualid * (Uast.pattern * Uast.term) option) list)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xl;
          MenhirLib.EngineTypes.startp = _startpos_xl_;
          MenhirLib.EngineTypes.endp = _endpos_xl_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xl : (Uast.qualid * (Uast.pattern * Uast.term) option) list =
          Obj.magic xl
        in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xl_ in
        let _v =
          let _1 = Some x in
          (xl : (Uast.qualid * (Uast.pattern * Uast.term) option) list)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xl;
          MenhirLib.EngineTypes.startp = _startpos_xl_;
          MenhirLib.EngineTypes.endp = _endpos_xl_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let xl : ((Uast.pattern * Uast.term option) * Uast.term) list =
          Obj.magic xl
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xl_ in
        let _endpos = _endpos_xl_ in
        let _v =
          let _1 = None in
          (xl : ((Uast.pattern * Uast.term option) * Uast.term) list)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xl;
          MenhirLib.EngineTypes.startp = _startpos_xl_;
          MenhirLib.EngineTypes.endp = _endpos_xl_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xl : ((Uast.pattern * Uast.term option) * Uast.term) list =
          Obj.magic xl
        in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xl_ in
        let _v =
          let _1 = Some x in
          (xl : ((Uast.pattern * Uast.term option) * Uast.term) list)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.Preid.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.Preid.t = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : bool = false in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : bool = true in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : bool = false in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : bool = true in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Uast.pty = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.pty = _2 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.labelled_arg list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.labelled_arg list = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pattern list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pattern list = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.binder list list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.binder list list = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.term list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.term list = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Uast.pattern list = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.pattern list = _1 :: _3 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Uast.term list = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.term = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.term list = _1 :: _3 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string * char option = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Ppxlib.constant =
          let i, m = _1 in
          Pconst_integer (i, m)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Ppxlib.constant = Pconst_float (_1, None) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (Pconst_string (_1, mk_loc _loc, None) : Ppxlib.constant)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : char = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Ppxlib.constant = Pconst_char _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = fl;
          MenhirLib.EngineTypes.startp = _startpos_fl_;
          MenhirLib.EngineTypes.endp = _endpos_fl_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let fl : (Uast.qualid * Uast.term) list = Obj.magic fl in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_fl_ in
        let _endpos = _endpos_fl_ in
        let _v : (Uast.qualid * Uast.term) list = fl in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = fl;
          MenhirLib.EngineTypes.startp = _startpos_fl_;
          MenhirLib.EngineTypes.endp = _endpos_fl_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let fl : (Uast.qualid * Uast.pattern) list = Obj.magic fl in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_fl_ in
        let _endpos = _endpos_fl_ in
        let _v : (Uast.qualid * Uast.pattern) list = fl in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.labelled_arg = Lunit in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.Preid.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.labelled_arg = Lnone _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Uast.Preid.t = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.labelled_arg = Lnamed _2 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Uast.Preid.t = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.labelled_arg = Loptional _2 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ty;
              MenhirLib.EngineTypes.startp = _startpos_ty_;
              MenhirLib.EngineTypes.endp = _endpos_ty_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = id;
                      MenhirLib.EngineTypes.startp = _startpos_id_;
                      MenhirLib.EngineTypes.endp = _endpos_id_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let ty : Uast.pty = Obj.magic ty in
        let _3 : unit = Obj.magic _3 in
        let id : Uast.Preid.t = Obj.magic id in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Uast.labelled_arg = Lghost (id, ty) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pty = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pty = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Uast.pty list = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.pty = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.pty = PTtuple (_1 :: _3) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = fun_def;
              MenhirLib.EngineTypes.startp = _startpos_fun_def_;
              MenhirLib.EngineTypes.endp = _endpos_fun_def_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ty;
                  MenhirLib.EngineTypes.startp = _startpos_ty_;
                  MenhirLib.EngineTypes.endp = _endpos_ty_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = fun_params;
                          MenhirLib.EngineTypes.startp = _startpos_fun_params_;
                          MenhirLib.EngineTypes.endp = _endpos_fun_params_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = fun_name;
                              MenhirLib.EngineTypes.startp = _startpos_fun_name_;
                              MenhirLib.EngineTypes.endp = _endpos_fun_name_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = fun_rec;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos_fun_rec_;
                                  MenhirLib.EngineTypes.endp = _endpos_fun_rec_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next = _menhir_stack;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _8 : unit = Obj.magic _8 in
        let fun_def : Uast.term option = Obj.magic fun_def in
        let ty : Uast.pty = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let fun_params : Uast.param list = Obj.magic fun_params in
        let fun_name : Uast.Preid.t = Obj.magic fun_name in
        let fun_rec : bool = Obj.magic fun_rec in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v =
          let _endpos = _endpos__8_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          ({
             fun_name;
             fun_rec;
             fun_type = Some ty;
             fun_params;
             fun_def;
             fun_spec = None;
             fun_loc = mk_loc _loc;
             fun_text = "";
           }
            : Uast.function_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = fun_def;
              MenhirLib.EngineTypes.startp = _startpos_fun_def_;
              MenhirLib.EngineTypes.endp = _endpos_fun_def_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = fun_params;
                  MenhirLib.EngineTypes.startp = _startpos_fun_params_;
                  MenhirLib.EngineTypes.endp = _endpos_fun_params_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = fun_name;
                      MenhirLib.EngineTypes.startp = _startpos_fun_name_;
                      MenhirLib.EngineTypes.endp = _endpos_fun_name_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = fun_rec;
                          MenhirLib.EngineTypes.startp = _startpos_fun_rec_;
                          MenhirLib.EngineTypes.endp = _endpos_fun_rec_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _6 : unit = Obj.magic _6 in
        let fun_def : Uast.term option = Obj.magic fun_def in
        let fun_params : Uast.param list = Obj.magic fun_params in
        let fun_name : Uast.Preid.t = Obj.magic fun_name in
        let fun_rec : bool = Obj.magic fun_rec in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _endpos = _endpos__6_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          ({
             fun_name;
             fun_rec;
             fun_type = None;
             fun_params;
             fun_def;
             fun_spec = None;
             fun_loc = mk_loc _loc;
             fun_text = "";
           }
            : Uast.function_)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.Preid.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.Preid.t = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (mk_pid (mixfix "{}") _loc : Uast.Preid.t)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (mk_pid (mixfix "{:_:}") _loc : Uast.Preid.t)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.fun_spec = empty_fspec in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.fun_spec = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.fun_spec = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pattern * Uast.term option = (_1, None) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Uast.term = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.pattern * Uast.term option = (_1, Some _3) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.Preid.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.Preid.t = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.Preid.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.Preid.t = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (mk_pid _1 _loc : Uast.Preid.t)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = infix _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : string = prefix _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = infix "=" in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit option = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : string = prefix _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : string = mixfix ".()" in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : string = mixfix "[_]" in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : string = mixfix "[->]" in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : string = mixfix "[_.._]" in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : string = mixfix "[.._]" in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : string = mixfix "[_..]" in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : string = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (mk_pid _2 _loc : Uast.Preid.t)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.Preid.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.Preid.t = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.Preid.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.Preid.t = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : string list = [] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : string list = Obj.magic xs in
        let x : string = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : string list = x :: xs in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Uast.labelled_arg list = [] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Uast.labelled_arg list = Obj.magic xs in
        let x : Uast.labelled_arg = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : Uast.labelled_arg list = x :: xs in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Uast.field list = [] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Uast.field list = Obj.magic xs in
        let x : Uast.field = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : Uast.field list = x :: xs in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.term = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          ((_1, _startpos, _endpos)
            : Uast.term * Lexing.position * Lexing.position)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Uast.param list = [] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.param list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Uast.param list = x in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Uast.pattern list = [] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.pattern list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Uast.pattern list = x in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Uast.labelled_arg list = [] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.labelled_arg list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Uast.labelled_arg list = x in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Uast.term list = [] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.term list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Uast.term list = x in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.Preid.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.qualid = Qpreid _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Uast.Preid.t = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.qualid = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.qualid = Qdot (_1, _3) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.Preid.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.qualid = Qpreid _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Uast.Preid.t = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.qualid = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.qualid = Qdot (_1, _3) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = cl;
          MenhirLib.EngineTypes.startp = _startpos_cl_;
          MenhirLib.EngineTypes.endp = _endpos_cl_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let cl : ((Uast.pattern * Uast.term option) * Uast.term) list =
          Obj.magic cl
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_cl_ in
        let _endpos = _endpos_cl_ in
        let _v : (Uast.pattern * Uast.term option * Uast.term) list =
          List.map (fun ((a, g), c) -> (a, g, c)) cl
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pat_desc = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (mk_pat _1 _loc : Uast.pattern)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pat_desc = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (mk_pat _1 _loc : Uast.pattern)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pat_desc = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (mk_pat _1 _loc : Uast.pattern)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pat_desc = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (mk_pat _1 _loc : Uast.pattern)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pat_desc = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (mk_pat _1 _loc : Uast.pattern)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let d : Uast.term_desc = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v =
          let _endpos = _endpos_d_ in
          let _startpos = _startpos_d_ in
          let _loc = (_startpos, _endpos) in
          (mk_term d _loc : Uast.term)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let d : Uast.term_desc = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v =
          let _endpos = _endpos_d_ in
          let _startpos = _startpos_d_ in
          let _loc = (_startpos, _endpos) in
          (mk_term d _loc : Uast.term)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let d : Uast.term_desc = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v =
          let _endpos = _endpos_d_ in
          let _startpos = _startpos_d_ in
          let _loc = (_startpos, _endpos) in
          (mk_term d _loc : Uast.term)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let d : Uast.term_desc = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v =
          let _endpos = _endpos_d_ in
          let _startpos = _startpos_d_ in
          let _loc = (_startpos, _endpos) in
          (mk_term d _loc : Uast.term)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bd;
          MenhirLib.EngineTypes.startp = _startpos_bd_;
          MenhirLib.EngineTypes.endp = _endpos_bd_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let bd : Uast.fun_spec = Obj.magic bd in
        let t : Uast.term = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bd_ in
        let _v : Uast.fun_spec = { bd with fun_req = t :: bd.fun_req } in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bd;
          MenhirLib.EngineTypes.startp = _startpos_bd_;
          MenhirLib.EngineTypes.endp = _endpos_bd_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let bd : Uast.fun_spec = Obj.magic bd in
        let t : Uast.term = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bd_ in
        let _v : Uast.fun_spec = { bd with fun_ens = t :: bd.fun_ens } in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bd;
          MenhirLib.EngineTypes.startp = _startpos_bd_;
          MenhirLib.EngineTypes.endp = _endpos_bd_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let bd : Uast.fun_spec = Obj.magic bd in
        let t : Uast.term = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bd_ in
        let _v : Uast.fun_spec =
          { bd with fun_variant = t :: bd.fun_variant }
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bd;
          MenhirLib.EngineTypes.startp = _startpos_bd_;
          MenhirLib.EngineTypes.endp = _endpos_bd_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let bd : Uast.fun_spec = Obj.magic bd in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bd_ in
        let _v : Uast.fun_spec = { bd with fun_coer = true } in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.Preid.t = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Uast.Preid.t list = [ x ] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Uast.Preid.t list = Obj.magic xs in
        let x : Uast.Preid.t = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : Uast.Preid.t list = x :: xs in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.Preid.t = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Uast.Preid.t list = [ x ] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Uast.Preid.t list = Obj.magic xs in
        let x : Uast.Preid.t = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : Uast.Preid.t list = x :: xs in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.term * Lexing.position * Lexing.position = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Uast.term * Lexing.position * Lexing.position) list = [ x ] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : (Uast.term * Lexing.position * Lexing.position) list =
          Obj.magic xs
        in
        let x : Uast.term * Lexing.position * Lexing.position = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Uast.term * Lexing.position * Lexing.position) list =
          x :: xs
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.pattern = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Uast.pattern list = [ x ] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Uast.pattern list = Obj.magic xs in
        let x : Uast.pattern = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : Uast.pattern list = x :: xs in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.term = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Uast.term list = [ x ] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Uast.term list = Obj.magic xs in
        let x : Uast.term = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : Uast.term list = x :: xs in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "*" in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : unit option = None in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : unit option = Some x in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Uast.pty option = None in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.pty = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Uast.pty option = Some x in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Uast.pty option = None in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let x : Uast.pty = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x = x in
          (Some x : Uast.pty option)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Uast.term option = None in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let x : Uast.term = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x = x in
          (Some x : Uast.term option)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Uast.spec_header option = None in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.spec_header = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Uast.spec_header option = Some x in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = params;
                      MenhirLib.EngineTypes.startp = _startpos_params_;
                      MenhirLib.EngineTypes.endp = _endpos_params_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : Uast.pty = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let params : Uast.Preid.t list = Obj.magic params in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let t = let _1 = _1_inlined1 in

                  _1 in

          let _endpos = _endpos__5_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (List.map (fun x -> (mk_loc _loc, x, t)) params : Uast.param list)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.param list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.param list = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Uast.param list = Obj.magic _2 in
        let _1 : Uast.param list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.param list = _1 @ _2 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pattern = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.pat_desc = Ptuple [] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Uast.pat_desc = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.pat_desc = _2 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pat_desc = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pat_desc = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pattern = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.Preid.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pat_desc = Pvar _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pat_desc = Pwild in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.qualid = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pat_desc = Papp (_1, []) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Ppxlib.constant = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pat_desc = Pconst _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : char = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : char = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.pat_desc = Pinterval (_1, _3) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pat_desc = Ptrue in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pat_desc = Pfalse in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (Papp (Qpreid (mk_pid "[]" _loc), []) : Uast.pat_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Uast.qualid * Uast.pattern) list = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.pat_desc = Prec _2 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pat_desc = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pat_desc = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pattern list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pat_desc = Ptuple _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pat_desc = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pat_desc = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Uast.pattern = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (Papp (Qpreid (mk_pid (infix "::") _loc), [ _1; _3 ]) : Uast.pat_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let xs : Uast.pattern list = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.qualid = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _3 = xs in
          (Papp (_1, _3) : Uast.pat_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Uast.pattern = Obj.magic _2 in
        let _1 : Uast.qualid = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.pat_desc = Papp (_1, [ _2 ]) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Uast.Preid.t = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.pat_desc = Pas (_1, _3) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Uast.pty = Obj.magic _2 in
        let _1 : Uast.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.pat_desc = Pcast (_1, _2) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pattern = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pat_desc = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pat_desc = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Uast.pattern = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.pat_desc = Por (_1, _3) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = y;
          MenhirLib.EngineTypes.startp = _startpos_y_;
          MenhirLib.EngineTypes.endp = _endpos_y_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let y : Uast.pattern = Obj.magic y in
        let _2 : unit = Obj.magic _2 in
        let x : Uast.qualid = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_y_ in
        let _v =
          let _1 = (x, y) in
          (_1 : Uast.qualid * Uast.pattern)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.qualid = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.qualid * Uast.pattern =
          let p =
            { pat_desc = Pvar (qualid_preid _1); pat_loc = loc_of_qualid _1 }
          in
          (_1, p)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (mk_pid (prefix _1) _loc : Uast.Preid.t)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.Preid.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.qualid = Qpreid _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Uast.Preid.t = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.qualid = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.qualid = Qdot (_1, _3) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.quant = Tforall in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.quant = Texists in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Uast.pty option = Obj.magic _2 in
        let _1 : Uast.Preid.t list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.binder list = List.map (fun id -> (id, _2)) _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (mk_pid _1 _loc : Uast.Preid.t)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = q;
                  MenhirLib.EngineTypes.startp = _startpos_q_;
                  MenhirLib.EngineTypes.endp = _endpos_q_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let t : Uast.term = Obj.magic t in
        let _2 : unit = Obj.magic _2 in
        let q : Uast.qualid = Obj.magic q in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_q_ in
        let _endpos = _endpos_t_ in
        let _v =
          let _loc_q_ = (_startpos_q_, _endpos_q_) in
          ((q, Some (mk_pat (Ptuple []) _loc_q_, t))
            : Uast.qualid * (Uast.pattern * Uast.term) option)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = p;
                  MenhirLib.EngineTypes.startp = _startpos_p_;
                  MenhirLib.EngineTypes.endp = _endpos_p_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = q;
                      MenhirLib.EngineTypes.startp = _startpos_q_;
                      MenhirLib.EngineTypes.endp = _endpos_q_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let t : Uast.term = Obj.magic t in
        let _3 : unit = Obj.magic _3 in
        let p : Uast.pattern = Obj.magic p in
        let q : Uast.qualid = Obj.magic q in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_q_ in
        let _endpos = _endpos_t_ in
        let _v : Uast.qualid * (Uast.pattern * Uast.term) option =
          (q, Some (p, t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let p : Uast.pattern = Obj.magic p in
        let q : Uast.qualid = Obj.magic q in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_q_ in
        let _endpos = _endpos_p_ in
        let _v =
          let _loc_p_ = (_startpos_p_, _endpos_p_) in
          ((q, Some (p, mk_term Ttrue _loc_p_))
            : Uast.qualid * (Uast.pattern * Uast.term) option)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = q;
          MenhirLib.EngineTypes.startp = _startpos_q_;
          MenhirLib.EngineTypes.endp = _endpos_q_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let q : Uast.qualid = Obj.magic q in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_q_ in
        let _endpos = _endpos_q_ in
        let _v : Uast.qualid * (Uast.pattern * Uast.term) option = (q, None) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let xs : Uast.labelled_arg list = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _2 = xs in
          (_2 : Uast.labelled_arg list)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.labelled_arg list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.labelled_arg list = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.Preid.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.labelled_arg = Lnone _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ty;
              MenhirLib.EngineTypes.startp = _startpos_ty_;
              MenhirLib.EngineTypes.endp = _endpos_ty_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = id;
                      MenhirLib.EngineTypes.startp = _startpos_id_;
                      MenhirLib.EngineTypes.endp = _endpos_id_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let ty : Uast.pty = Obj.magic ty in
        let _3 : unit = Obj.magic _3 in
        let id : Uast.Preid.t = Obj.magic id in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Uast.labelled_arg = Lghost (id, ty) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.qualid * Uast.pattern = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _2 = None in
          ([ x ] : (Uast.qualid * Uast.pattern) list)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let x_inlined1 : unit = Obj.magic x_inlined1 in
        let x : Uast.qualid * Uast.pattern = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v =
          let _2 = let x = x_inlined1 in

                   Some x in

          ([ x ] : (Uast.qualid * Uast.pattern) list)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xl;
          MenhirLib.EngineTypes.startp = _startpos_xl_;
          MenhirLib.EngineTypes.endp = _endpos_xl_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let xl : (Uast.qualid * Uast.pattern) list = Obj.magic xl in
        let _2 : unit = Obj.magic _2 in
        let x : Uast.qualid * Uast.pattern = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xl_ in
        let _v : (Uast.qualid * Uast.pattern) list = x :: xl in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.qualid * Uast.term = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _2 = None in
          ([ x ] : (Uast.qualid * Uast.term) list)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let x_inlined1 : unit = Obj.magic x_inlined1 in
        let x : Uast.qualid * Uast.term = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v =
          let _2 = let x = x_inlined1 in

                   Some x in

          ([ x ] : (Uast.qualid * Uast.term) list)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xl;
          MenhirLib.EngineTypes.startp = _startpos_xl_;
          MenhirLib.EngineTypes.endp = _endpos_xl_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let xl : (Uast.qualid * Uast.term) list = Obj.magic xl in
        let _2 : unit = Obj.magic _2 in
        let x : Uast.qualid * Uast.term = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xl_ in
        let _v : (Uast.qualid * Uast.term) list = x :: xl in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.qualid * (Uast.pattern * Uast.term) option = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Uast.qualid * (Uast.pattern * Uast.term) option) list =
          [ x ]
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let xs : (Uast.qualid * (Uast.pattern * Uast.term) option) list =
          Obj.magic xs
        in
        let _2 : unit = Obj.magic _2 in
        let x : Uast.qualid * (Uast.pattern * Uast.term) option = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Uast.qualid * (Uast.pattern * Uast.term) option) list =
          x :: xs
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = y;
          MenhirLib.EngineTypes.startp = _startpos_y_;
          MenhirLib.EngineTypes.endp = _endpos_y_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let y : Uast.term = Obj.magic y in
        let _2 : unit = Obj.magic _2 in
        let x : Uast.pattern * Uast.term option = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_y_ in
        let _v =
          let x = (x, y) in
          ([ x ] : ((Uast.pattern * Uast.term option) * Uast.term) list)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = y;
                  MenhirLib.EngineTypes.startp = _startpos_y_;
                  MenhirLib.EngineTypes.endp = _endpos_y_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = x;
                          MenhirLib.EngineTypes.startp = _startpos_x_;
                          MenhirLib.EngineTypes.endp = _endpos_x_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let xs : ((Uast.pattern * Uast.term option) * Uast.term) list =
          Obj.magic xs
        in
        let _2 : unit = Obj.magic _2 in
        let y : Uast.term = Obj.magic y in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let x : Uast.pattern * Uast.term option = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x = (x, y) in
          (x :: xs : ((Uast.pattern * Uast.term option) * Uast.term) list)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.pattern = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Uast.pattern list = [ x ] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let xs : Uast.pattern list = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : Uast.pattern = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : Uast.pattern list = x :: xs in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.binder list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Uast.binder list list = [ x ] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let xs : Uast.binder list list = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : Uast.binder list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : Uast.binder list list = x :: xs in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.labelled_arg = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Uast.labelled_arg list = [ x ] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let xs : Uast.labelled_arg list = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : Uast.labelled_arg = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : Uast.labelled_arg list = x :: xs in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.term = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Uast.term list = [ x ] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let xs : Uast.term list = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : Uast.term = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : Uast.term list = x :: xs in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Uast.pty = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Uast.pty list = [ x ] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let xs : Uast.pty list = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : Uast.pty = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : Uast.pty list = x :: xs in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let t : Uast.term = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t_ in
        let _v : Uast.term = t in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.term_desc = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.term_desc = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Uast.term = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.term_desc = Tnot _2 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Uast.term = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.term_desc = Told _2 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Uast.term = Obj.magic _2 in
        let _1 : Uast.Preid.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.term_desc = Tidapp (Qpreid _1, [ _2 ]) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let r : Uast.term = Obj.magic r in
        let _1 : unit = Obj.magic _1 in
        let l : Uast.term = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v =
          let o = Timplies in
          (Tbinop (l, o, r) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let r : Uast.term = Obj.magic r in
        let _1 : unit = Obj.magic _1 in
        let l : Uast.term = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v =
          let o = Tiff in
          (Tbinop (l, o, r) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let r : Uast.term = Obj.magic r in
        let _1 : unit = Obj.magic _1 in
        let l : Uast.term = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v =
          let o = Tor in
          (Tbinop (l, o, r) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let r : Uast.term = Obj.magic r in
        let _1 : unit = Obj.magic _1 in
        let l : Uast.term = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v =
          let o = Tor_asym in
          (Tbinop (l, o, r) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let r : Uast.term = Obj.magic r in
        let _1 : unit = Obj.magic _1 in
        let l : Uast.term = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v =
          let o = Tand in
          (Tbinop (l, o, r) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let r : Uast.term = Obj.magic r in
        let _1 : unit = Obj.magic _1 in
        let l : Uast.term = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v =
          let o = Tand_asym in
          (Tbinop (l, o, r) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = o;
              MenhirLib.EngineTypes.startp = _startpos_o_;
              MenhirLib.EngineTypes.endp = _endpos_o_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let r : Uast.term = Obj.magic r in
        let o : string = Obj.magic o in
        let l : Uast.term = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v =
          let o =
            let _endpos = _endpos_o_ in
            let _startpos = _startpos_o_ in
            let _loc = (_startpos, _endpos) in

            mk_pid (infix o) _loc
          in

          (Tinfix (l, o, r) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let r : Uast.term = Obj.magic r in
        let _1 : unit = Obj.magic _1 in
        let l : Uast.term = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v =
          let o =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            let _loc = (_startpos, _endpos) in

            mk_pid (infix "=") _loc
          in

          (Tinfix (l, o, r) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let r : Uast.term = Obj.magic r in
        let _1 : unit = Obj.magic _1 in
        let l : Uast.term = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v =
          let o =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            let _loc = (_startpos, _endpos) in

            mk_pid (infix "<>") _loc
          in

          (Tinfix (l, o, r) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = o;
              MenhirLib.EngineTypes.startp = _startpos_o_;
              MenhirLib.EngineTypes.endp = _endpos_o_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let r : Uast.term = Obj.magic r in
        let o : string = Obj.magic o in
        let l : Uast.term = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v =
          let o =
            let _endpos = _endpos_o_ in
            let _startpos = _startpos_o_ in
            let _loc = (_startpos, _endpos) in

            mk_pid (infix o) _loc
          in

          (Tidapp (Qpreid o, [ l; r ]) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = o;
              MenhirLib.EngineTypes.startp = _startpos_o_;
              MenhirLib.EngineTypes.endp = _endpos_o_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let r : Uast.term = Obj.magic r in
        let o : string = Obj.magic o in
        let l : Uast.term = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v =
          let o =
            let _endpos = _endpos_o_ in
            let _startpos = _startpos_o_ in
            let _loc = (_startpos, _endpos) in

            mk_pid (infix o) _loc
          in

          (Tidapp (Qpreid o, [ l; r ]) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let r : Uast.term = Obj.magic r in
        let _1 : unit = Obj.magic _1 in
        let l : Uast.term = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v =
          let o =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            let _loc = (_startpos, _endpos) in

            mk_pid (infix "*") _loc
          in

          (Tidapp (Qpreid o, [ l; r ]) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = o;
              MenhirLib.EngineTypes.startp = _startpos_o_;
              MenhirLib.EngineTypes.endp = _endpos_o_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let r : Uast.term = Obj.magic r in
        let o : string = Obj.magic o in
        let l : Uast.term = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v =
          let o =
            let _endpos = _endpos_o_ in
            let _startpos = _startpos_o_ in
            let _loc = (_startpos, _endpos) in

            mk_pid (infix o) _loc
          in

          (Tidapp (Qpreid o, [ l; r ]) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let r : Uast.term = Obj.magic r in
        let _2 : unit = Obj.magic _2 in
        let l : Uast.term = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v =
          let _endpos = _endpos_r_ in
          let _startpos = _startpos_l_ in
          let _loc = (_startpos, _endpos) in
          (Tidapp (Qpreid (mk_pid (infix "::") _loc), [ l; r ])
            : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = o;
              MenhirLib.EngineTypes.startp = _startpos_o_;
              MenhirLib.EngineTypes.endp = _endpos_o_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let r : Uast.term = Obj.magic r in
        let o : string = Obj.magic o in
        let l : Uast.term = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v =
          let _endpos = _endpos_r_ in
          let _startpos = _startpos_l_ in
          let _loc = (_startpos, _endpos) in
          (let id = mk_pid o _loc in
           Tidapp (Qpreid id, [ l; r ])
            : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : (Uast.term * Lexing.position * Lexing.position) list =
          Obj.magic _2
        in
        let _1 : Uast.term = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _startpos = _startpos__1_ in
          (let join f (a, _, e) = mk_term (Tapply (f, a)) (_startpos, e) in
           (List.fold_left join _1 _2).term_desc
            : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _6 : Uast.term = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : Uast.term = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Uast.term = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : Uast.term_desc = Tif (_2, _4, _6) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _6 : Uast.term = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : Uast.term = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Uast.pattern = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : Uast.term_desc =
          let cast ty = { _4 with term_desc = Tcast (_4, ty) } in
          let pat, def =
            match _2.pat_desc with
            | Ptuple [] -> ({ _2 with pat_desc = Pwild }, cast (PTtuple []))
            | Pcast (({ pat_desc = Pvar _ | Pwild; _ } as p), ty) -> (p, cast ty)
            | _ -> (_2, _4)
          in
          match pat.pat_desc with
          | Pvar id -> Tlet (id, def, _6)
          | Pwild -> Tlet (id_anonymous pat.pat_loc, def, _6)
          | _ -> Tcase (def, [ (pat, None, _6) ])
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _6 : Uast.term = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : Uast.term = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Uast.Preid.t = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : Uast.term_desc = Tlet (_2, _4, _6) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : (Uast.pattern * Uast.term option * Uast.term) list =
          Obj.magic _4
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Uast.term = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Uast.term_desc = Tcase (_2, _4) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : (Uast.pattern * Uast.term option * Uast.term) list =
          Obj.magic _4
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Uast.term list = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          (Tcase (mk_term (Ttuple _2) _loc__2_, _4) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : Uast.term = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Uast.binder list list = Obj.magic _2 in
        let _1 : Uast.quant = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Uast.term_desc = Tquant (_1, List.concat _2, _4) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ty;
                  MenhirLib.EngineTypes.startp = _startpos_ty_;
                  MenhirLib.EngineTypes.endp = _endpos_ty_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = args;
                      MenhirLib.EngineTypes.startp = _startpos_args_;
                      MenhirLib.EngineTypes.endp = _endpos_args_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let t : Uast.term = Obj.magic t in
        let _4 : unit = Obj.magic _4 in
        let ty : Uast.pty option = Obj.magic ty in
        let args : Uast.pattern list = Obj.magic args in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : Uast.term_desc = Tlambda (args, t, ty) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Uast.term = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.term_desc = Tattr (_1, _2) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Uast.pty = Obj.magic _2 in
        let _1 : Uast.term = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.term_desc = Tcast (_1, _2) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.term = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.term = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.qualid = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.term_desc = Tpreid _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Ppxlib.constant = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.term_desc = Tconst _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.term_desc = Ttrue in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.term_desc = Tfalse in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = a;
          MenhirLib.EngineTypes.startp = _startpos_a_;
          MenhirLib.EngineTypes.endp = _endpos_a_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = o;
              MenhirLib.EngineTypes.startp = _startpos_o_;
              MenhirLib.EngineTypes.endp = _endpos_o_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let a : Uast.term = Obj.magic a in
        let o : string = Obj.magic o in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_o_ in
        let _endpos = _endpos_a_ in
        let _v =
          let o =
            let _endpos = _endpos_o_ in
            let _startpos = _startpos_o_ in
            let _loc = (_startpos, _endpos) in

            mk_pid (prefix o) _loc
          in

          (Tidapp (Qpreid o, [ a ]) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.term_desc = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.term_desc = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let t : Uast.term = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.term_desc = t.term_desc in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.term_desc = Ttuple [] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (Tpreid (Qpreid (mk_pid "[]" _loc)) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Uast.qualid * Uast.term) list = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.term_desc = Trecord _2 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Uast.qualid * Uast.term) list = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Uast.term = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Uast.term_desc = Tupdate (_2, _4) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (Tpreid (Qpreid (mk_pid (mixfix "{}") _loc)) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let t : Uast.term = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (let id = Qpreid (mk_pid (mixfix "{:_:}") _loc) in
           Tidapp (id, [ t ])
            : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.term = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.term = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.qualid = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.term_desc = Tpreid _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = a;
          MenhirLib.EngineTypes.startp = _startpos_a_;
          MenhirLib.EngineTypes.endp = _endpos_a_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = o;
              MenhirLib.EngineTypes.startp = _startpos_o_;
              MenhirLib.EngineTypes.endp = _endpos_o_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let a : Uast.term = Obj.magic a in
        let o : string = Obj.magic o in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_o_ in
        let _endpos = _endpos_a_ in
        let _v =
          let o =
            let _endpos = _endpos_o_ in
            let _startpos = _startpos_o_ in
            let _loc = (_startpos, _endpos) in

            mk_pid (prefix o) _loc
          in

          (Tidapp (Qpreid o, [ a ]) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.term_desc = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.term_desc = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = y;
          MenhirLib.EngineTypes.startp = _startpos_y_;
          MenhirLib.EngineTypes.endp = _endpos_y_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let y : Uast.term = Obj.magic y in
        let _2 : unit = Obj.magic _2 in
        let x : Uast.qualid = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_y_ in
        let _v =
          let _1 = (x, y) in
          (_1 : Uast.qualid * Uast.term)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.qualid = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.qualid * Uast.term =
          let t = { term_desc = Tpreid _1; term_loc = loc_of_qualid _1 } in
          (_1, t)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.term_desc = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.term_desc = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Uast.term = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.qualid = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.term_desc = Tscope (_1, _3) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Uast.qualid = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.term = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.term_desc = Tfield (_1, _3) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : Uast.term = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.term = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          (Tidapp (get_op _loc__2_, [ _1; _3 ]) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _6 : unit = Obj.magic _6 in
        let _5 : Uast.term = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : Uast.term = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.term = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          (Tidapp (set_op _loc__2_, [ _1; _3; _5 ]) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _6 : unit = Obj.magic _6 in
        let _5 : Uast.term = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : Uast.term = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.term = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          (Tidapp (sub_op _loc__2_, [ _1; _3; _5 ]) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : Uast.term = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.term = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          (Tidapp (above_op _loc__2_, [ _1; _3 ]) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : Uast.term = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.term = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          (Tidapp (below_op _loc__2_, [ _1; _4 ]) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Uast.term list = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.term_desc = Ttuple _2 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : Uast.term = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.term = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          (Tidapp (array_get _loc__2_, [ _1; _4 ]) : Uast.term_desc)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : bool = true in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : bool = false in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = inv;
          MenhirLib.EngineTypes.startp = _startpos_inv_;
          MenhirLib.EngineTypes.endp = _endpos_inv_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let inv : Uast.term = Obj.magic inv in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_inv_ in
        let _v : Uast.term = inv in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = id;
              MenhirLib.EngineTypes.startp = _startpos_id_;
              MenhirLib.EngineTypes.endp = _endpos_id_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let l : Uast.term list = Obj.magic l in
        let id : Uast.Preid.t = Obj.magic id in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_l_ in
        let _v : (Uast.Preid.t * Uast.term list) option = Some (id, l) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Uast.Preid.t * Uast.term list) option = None in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.qualid = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pty = PTtyapp (_1, []) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.Preid.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pty = PTtyvar _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Uast.pty = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.pty = _2 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Uast.qualid = Obj.magic _2 in
        let _1 : Uast.pty = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Uast.pty = PTtyapp (_2, [ _1 ]) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = id;
          MenhirLib.EngineTypes.startp = _startpos_id_;
          MenhirLib.EngineTypes.endp = _endpos_id_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let id : Uast.qualid = Obj.magic id in
        let _5 : unit = Obj.magic _5 in
        let _4 : Uast.pty list = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Uast.pty = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_id_ in
        let _v : Uast.pty = PTtyapp (id, _2 :: _4) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pty = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pty list = [ _1 ] in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Uast.pty list = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.pty = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.pty list = _1 :: _3 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.pty = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.pty = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = rty;
          MenhirLib.EngineTypes.startp = _startpos_rty_;
          MenhirLib.EngineTypes.endp = _endpos_rty_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = aty;
                  MenhirLib.EngineTypes.startp = _startpos_aty_;
                  MenhirLib.EngineTypes.endp = _endpos_aty_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = id;
                          MenhirLib.EngineTypes.startp = _startpos_id_;
                          MenhirLib.EngineTypes.endp = _endpos_id_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let rty : Uast.pty = Obj.magic rty in
        let _4 : unit = Obj.magic _4 in
        let aty : Uast.pty = Obj.magic aty in
        let _2 : unit = Obj.magic _2 in
        let id : Uast.Preid.t = Obj.magic id in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_id_ in
        let _endpos = _endpos_rty_ in
        let _v : Uast.pty = PTarrow (Lnamed id, aty, rty) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = rty;
          MenhirLib.EngineTypes.startp = _startpos_rty_;
          MenhirLib.EngineTypes.endp = _endpos_rty_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = aty;
                  MenhirLib.EngineTypes.startp = _startpos_aty_;
                  MenhirLib.EngineTypes.endp = _endpos_aty_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = id;
                          MenhirLib.EngineTypes.startp = _startpos_id_;
                          MenhirLib.EngineTypes.endp = _endpos_id_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let rty : Uast.pty = Obj.magic rty in
        let _5 : unit = Obj.magic _5 in
        let aty : Uast.pty = Obj.magic aty in
        let _3 : unit = Obj.magic _3 in
        let id : Uast.Preid.t = Obj.magic id in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_rty_ in
        let _v : Uast.pty = PTarrow (Loptional id, aty, rty) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Uast.pty = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.pty = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (let l = mk_loc _loc in
           PTarrow (Lnone (id_anonymous l), _1, _3)
            : Uast.pty)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Uast.pty list = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.pty = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.pty = PTtuple (_1 :: _3) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = m;
                  MenhirLib.EngineTypes.startp = _startpos_m_;
                  MenhirLib.EngineTypes.endp = _endpos_m_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = e;
                      MenhirLib.EngineTypes.startp = _startpos_e_;
                      MenhirLib.EngineTypes.endp = _endpos_e_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let i : (Uast.Preid.t * Uast.term list) option = Obj.magic i in
        let m : Uast.field list = Obj.magic m in
        let e : bool = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__4_ in
        let _v : Uast.type_spec =
          {
            ty_ephemeral = e || List.exists (fun f -> f.f_mutable) m;
            ty_field = m;
            ty_invariant = i;
            ty_text = "";
            ty_loc = Location.none;
          }
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = f_pty;
          MenhirLib.EngineTypes.startp = _startpos_f_pty_;
          MenhirLib.EngineTypes.endp = _endpos_f_pty_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = f_preid;
                  MenhirLib.EngineTypes.startp = _startpos_f_preid_;
                  MenhirLib.EngineTypes.endp = _endpos_f_preid_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = f_mutable;
                          MenhirLib.EngineTypes.startp = _startpos_f_mutable_;
                          MenhirLib.EngineTypes.endp = _endpos_f_mutable_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let f_pty : Uast.pty = Obj.magic f_pty in
        let _4 : unit = Obj.magic _4 in
        let f_preid : Uast.Preid.t = Obj.magic f_preid in
        let _2 : unit = Obj.magic _2 in
        let f_mutable : bool = Obj.magic f_mutable in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_f_mutable_ in
        let _endpos = _endpos_f_pty_ in
        let _v =
          let _endpos = _endpos_f_pty_ in
          let _startpos = _startpos_f_mutable_ in
          let _loc = (_startpos, _endpos) in
          ({ f_preid; f_mutable; f_pty; f_loc = mk_loc _loc } : Uast.field)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (mk_pid _1 _loc : Uast.Preid.t)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Uast.Preid.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Uast.qualid = Qpreid _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Uast.Preid.t = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Uast.qualid = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.qualid = Qdot (_1, _3) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = bd;
              MenhirLib.EngineTypes.startp = _startpos_bd_;
              MenhirLib.EngineTypes.endp = _endpos_bd_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = hd;
                  MenhirLib.EngineTypes.startp = _startpos_hd_;
                  MenhirLib.EngineTypes.endp = _endpos_hd_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let bd : Uast.val_spec = Obj.magic bd in
        let hd : Uast.spec_header option = Obj.magic hd in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_hd_ in
        let _endpos = _endpos__3_ in
        let _v : Uast.val_spec = { bd with sp_header = hd } in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Uast.val_spec = empty_vspec in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bd;
          MenhirLib.EngineTypes.startp = _startpos_bd_;
          MenhirLib.EngineTypes.endp = _endpos_bd_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let bd : Uast.val_spec = Obj.magic bd in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bd_ in
        let _v : Uast.val_spec = { bd with sp_pure = true } in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bd;
          MenhirLib.EngineTypes.startp = _startpos_bd_;
          MenhirLib.EngineTypes.endp = _endpos_bd_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let bd : Uast.val_spec = Obj.magic bd in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bd_ in
        let _v : Uast.val_spec = { bd with sp_diverge = true } in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bd;
          MenhirLib.EngineTypes.startp = _startpos_bd_;
          MenhirLib.EngineTypes.endp = _endpos_bd_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let bd : Uast.val_spec = Obj.magic bd in
        let xs : Uast.term list = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bd_ in
        let _v =
          let wr = xs in
          ({ bd with sp_writes = wr @ bd.sp_writes } : Uast.val_spec)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bd;
          MenhirLib.EngineTypes.startp = _startpos_bd_;
          MenhirLib.EngineTypes.endp = _endpos_bd_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let bd : Uast.val_spec = Obj.magic bd in
        let xs : Uast.term list = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bd_ in
        let _v =
          let cs = xs in
          ({ bd with sp_consumes = cs @ bd.sp_consumes } : Uast.val_spec)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bd;
          MenhirLib.EngineTypes.startp = _startpos_bd_;
          MenhirLib.EngineTypes.endp = _endpos_bd_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let bd : Uast.val_spec = Obj.magic bd in
        let t : Uast.term = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bd_ in
        let _v : Uast.val_spec = { bd with sp_pre = t :: bd.sp_pre } in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bd;
          MenhirLib.EngineTypes.startp = _startpos_bd_;
          MenhirLib.EngineTypes.endp = _endpos_bd_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let bd : Uast.val_spec = Obj.magic bd in
        let t : Uast.term = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bd_ in
        let _v : Uast.val_spec = { bd with sp_checks = t :: bd.sp_checks } in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bd;
          MenhirLib.EngineTypes.startp = _startpos_bd_;
          MenhirLib.EngineTypes.endp = _endpos_bd_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let bd : Uast.val_spec = Obj.magic bd in
        let t : Uast.term = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bd_ in
        let _v : Uast.val_spec = { bd with sp_post = t :: bd.sp_post } in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bd;
          MenhirLib.EngineTypes.startp = _startpos_bd_;
          MenhirLib.EngineTypes.endp = _endpos_bd_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = r;
              MenhirLib.EngineTypes.startp = _startpos_r_;
              MenhirLib.EngineTypes.endp = _endpos_r_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let bd : Uast.val_spec = Obj.magic bd in
        let r : (Uast.qualid * (Uast.pattern * Uast.term) option) list =
          Obj.magic r
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bd_ in
        let _v =
          let _loc_r_ = (_startpos_r_, _endpos_r_) in
          (let xp = (mk_loc _loc_r_, r) in
           { bd with sp_xpost = xp :: bd.sp_xpost }
            : Uast.val_spec)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bd;
          MenhirLib.EngineTypes.startp = _startpos_bd_;
          MenhirLib.EngineTypes.endp = _endpos_bd_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let bd : Uast.val_spec = Obj.magic bd in
        let e : string = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bd_ in
        let _v : Uast.val_spec = { bd with sp_equiv = e :: bd.sp_equiv } in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = args;
          MenhirLib.EngineTypes.startp = _startpos_args_;
          MenhirLib.EngineTypes.endp = _endpos_args_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = nm;
              MenhirLib.EngineTypes.startp = _startpos_nm_;
              MenhirLib.EngineTypes.endp = _endpos_nm_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ret;
                  MenhirLib.EngineTypes.startp = _startpos_ret_;
                  MenhirLib.EngineTypes.endp = _endpos_ret_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let args : Uast.labelled_arg list = Obj.magic args in
        let nm : Uast.Preid.t = Obj.magic nm in
        let ret : Uast.labelled_arg list = Obj.magic ret in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ret_ in
        let _endpos = _endpos_args_ in
        let _v : Uast.spec_header =
          { sp_hd_nm = nm; sp_hd_ret = ret; sp_hd_args = args }
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = arg2;
          MenhirLib.EngineTypes.startp = _startpos_arg2_;
          MenhirLib.EngineTypes.endp = _endpos_arg2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = nm;
              MenhirLib.EngineTypes.startp = _startpos_nm_;
              MenhirLib.EngineTypes.endp = _endpos_nm_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = arg1;
                  MenhirLib.EngineTypes.startp = _startpos_arg1_;
                  MenhirLib.EngineTypes.endp = _endpos_arg1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ret;
                      MenhirLib.EngineTypes.startp = _startpos_ret_;
                      MenhirLib.EngineTypes.endp = _endpos_ret_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let arg2 : Uast.labelled_arg = Obj.magic arg2 in
        let nm : string = Obj.magic nm in
        let arg1 : Uast.labelled_arg = Obj.magic arg1 in
        let ret : Uast.labelled_arg list = Obj.magic ret in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ret_ in
        let _endpos = _endpos_arg2_ in
        let _v =
          let _loc_nm_ = (_startpos_nm_, _endpos_nm_) in
          (let sp_hd_nm = Preid.create ~loc:(mk_loc _loc_nm_) nm in
           { sp_hd_nm; sp_hd_ret = ret; sp_hd_args = [ arg1; arg2 ] }
            : Uast.spec_header)
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = args;
          MenhirLib.EngineTypes.startp = _startpos_args_;
          MenhirLib.EngineTypes.endp = _endpos_args_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = nm;
              MenhirLib.EngineTypes.startp = _startpos_nm_;
              MenhirLib.EngineTypes.endp = _endpos_nm_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let args : Uast.labelled_arg list = Obj.magic args in
        let nm : Uast.Preid.t = Obj.magic nm in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_nm_ in
        let _endpos = _endpos_args_ in
        let _v : Uast.spec_header =
          { sp_hd_nm = nm; sp_hd_ret = []; sp_hd_args = args }
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]

  and trace = None
end

module MenhirInterpreter = struct
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  module TI = MenhirLib.Engine.Make (ET)
  include TI

  module Symbols = struct
    type _ terminal =
      | T_error : unit terminal
      | T_WITH : unit terminal
      | T_WHEN : unit terminal
      | T_VARIANT : unit terminal
      | T_UNDERSCORE : unit terminal
      | T_UIDENT : string terminal
      | T_TRUE : unit terminal
      | T_TILDE : unit terminal
      | T_THEN : unit terminal
      | T_STRING : string terminal
      | T_STAR : unit terminal
      | T_SEMICOLON : unit terminal
      | T_RIGHTSQ : unit terminal
      | T_RIGHTPAR : unit terminal
      | T_RIGHTBRC : unit terminal
      | T_REQUIRES : unit terminal
      | T_REC : unit terminal
      | T_RAISES : unit terminal
      | T_QUOTE_LIDENT : string terminal
      | T_QUESTION : unit terminal
      | T_PURE : unit terminal
      | T_PREDICATE : unit terminal
      | T_OR : unit terminal
      | T_OPPREF : string terminal
      | T_OP4 : string terminal
      | T_OP3 : string terminal
      | T_OP2 : string terminal
      | T_OP1 : string terminal
      | T_OLD : unit terminal
      | T_NOT : unit terminal
      | T_MUTABLE : unit terminal
      | T_MODIFIES : unit terminal
      | T_MODEL : unit terminal
      | T_MATCH : unit terminal
      | T_LTGT : unit terminal
      | T_LRARROW : unit terminal
      | T_LIDENT : string terminal
      | T_LET : unit terminal
      | T_LEFTSQRIGHTSQ : unit terminal
      | T_LEFTSQ : unit terminal
      | T_LEFTPAR : unit terminal
      | T_LEFTBRCRIGHTBRC : unit terminal
      | T_LEFTBRCCOLON : unit terminal
      | T_LEFTBRC : unit terminal
      | T_INVARIANT : unit terminal
      | T_INTEGER : (string * char option) terminal
      | T_IN : unit terminal
      | T_IF : unit terminal
      | T_FUNCTION : unit terminal
      | T_FUN : unit terminal
      | T_FORALL : unit terminal
      | T_FLOAT : string terminal
      | T_FALSE : unit terminal
      | T_EXISTS : unit terminal
      | T_EQUIVALENT : unit terminal
      | T_EQUAL : unit terminal
      | T_EPHEMERAL : unit terminal
      | T_EOF : unit terminal
      | T_ENSURES : unit terminal
      | T_ELSE : unit terminal
      | T_DOTDOT : unit terminal
      | T_DOT : unit terminal
      | T_DIVERGES : unit terminal
      | T_CONSUMES : unit terminal
      | T_COMMA : unit terminal
      | T_COLONRIGHTBRC : unit terminal
      | T_COLONCOLON : unit terminal
      | T_COLON : unit terminal
      | T_COERCION : unit terminal
      | T_CHECKS : unit terminal
      | T_CHAR : char terminal
      | T_BARBAR : unit terminal
      | T_BAR : unit terminal
      | T_BACKQUOTE_LIDENT : string terminal
      | T_AXIOM : unit terminal
      | T_ATTRIBUTE : string terminal
      | T_AS : unit terminal
      | T_ARROW : unit terminal
      | T_AND : unit terminal
      | T_AMPAMP : unit terminal

    type _ nonterminal =
      | N_val_spec_header : Uast.spec_header nonterminal
      | N_val_spec_body : Uast.val_spec nonterminal
      | N_val_spec : Uast.val_spec nonterminal
      | N_uqualid : Uast.qualid nonterminal
      | N_uident : Uast.Preid.t nonterminal
      | N_type_spec_model : Uast.field nonterminal
      | N_type_spec : Uast.type_spec nonterminal
      | N_typ : Uast.pty nonterminal
      | N_ty_tuple : Uast.pty list nonterminal
      | N_ty_arg : Uast.pty nonterminal
      | N_ts_invariants : (Uast.Preid.t * Uast.term list) option nonterminal
      | N_ts_invariant : Uast.term nonterminal
      | N_ts_ephemeral : bool nonterminal
      | N_term_sub_ : Uast.term_desc nonterminal
      | N_term_rec_field_term_ : (Uast.qualid * Uast.term) nonterminal
      | N_term_dot_ : Uast.term_desc nonterminal
      | N_term_dot : Uast.term nonterminal
      | N_term_block_ : Uast.term_desc nonterminal
      | N_term_arg_ : Uast.term_desc nonterminal
      | N_term_arg : Uast.term nonterminal
      | N_term_ : Uast.term_desc nonterminal
      | N_term : Uast.term nonterminal
      | N_separated_nonempty_list_COMMA_typ_ : Uast.pty list nonterminal
      | N_separated_nonempty_list_COMMA_term_ : Uast.term list nonterminal
      | N_separated_nonempty_list_COMMA_ret_value_
          : Uast.labelled_arg list nonterminal
      | N_separated_nonempty_list_COMMA_quant_vars_
          : Uast.binder list list nonterminal
      | N_separated_nonempty_list_COMMA_mk_pat_pat_uni___
          : Uast.pattern list nonterminal
      | N_separated_nonempty_list_BAR_separated_pair_guarded_pattern_ARROW_term__
          : ((Uast.pattern * Uast.term option) * Uast.term) list nonterminal
      | N_separated_nonempty_list_BAR_raises_
          : (Uast.qualid * (Uast.pattern * Uast.term) option) list nonterminal
      | N_semicolon_list1_term_rec_field_term__
          : (Uast.qualid * Uast.term) list nonterminal
      | N_semicolon_list1_pattern_rec_field_pattern__
          : (Uast.qualid * Uast.pattern) list nonterminal
      | N_ret_value : Uast.labelled_arg nonterminal
      | N_ret_name : Uast.labelled_arg list nonterminal
      | N_raises : (Uast.qualid * (Uast.pattern * Uast.term) option) nonterminal
      | N_quote_lident : Uast.Preid.t nonterminal
      | N_quant_vars : Uast.binder list nonterminal
      | N_quant : Uast.quant nonterminal
      | N_qualid : Uast.qualid nonterminal
      | N_prefix_op : Uast.Preid.t nonterminal
      | N_pattern_rec_field_pattern_ : (Uast.qualid * Uast.pattern) nonterminal
      | N_pattern_ : Uast.pat_desc nonterminal
      | N_pattern : Uast.pattern nonterminal
      | N_pat_uni_ : Uast.pat_desc nonterminal
      | N_pat_conj_ : Uast.pat_desc nonterminal
      | N_pat_arg_no_lpar_ : Uast.pat_desc nonterminal
      | N_pat_arg_no_lpar : Uast.pattern nonterminal
      | N_pat_arg_ : Uast.pat_desc nonterminal
      | N_pat_arg : Uast.pattern nonterminal
      | N_params : Uast.param list nonterminal
      | N_param : Uast.param list nonterminal
      | N_option_val_spec_header_ : Uast.spec_header option nonterminal
      | N_option_preceded_EQUAL_term__ : Uast.term option nonterminal
      | N_option_preceded_COLON_fun_typ__ : Uast.pty option nonterminal
      | N_option_cast_ : Uast.pty option nonterminal
      | N_option_UNDERSCORE_ : unit option nonterminal
      | N_op_symbol : string nonterminal
      | N_nonempty_list_ts_invariant_ : Uast.term list nonterminal
      | N_nonempty_list_pat_arg_ : Uast.pattern list nonterminal
      | N_nonempty_list_located_term_arg__
          : (Uast.term * Lexing.position * Lexing.position) list nonterminal
      | N_nonempty_list_lident_ : Uast.Preid.t list nonterminal
      | N_nonempty_list_binder_var_ : Uast.Preid.t list nonterminal
      | N_nonempty_func_spec : Uast.fun_spec nonterminal
      | N_mk_term_term_dot__ : Uast.term nonterminal
      | N_mk_term_term_block__ : Uast.term nonterminal
      | N_mk_term_term_arg__ : Uast.term nonterminal
      | N_mk_term_term__ : Uast.term nonterminal
      | N_mk_pat_pattern__ : Uast.pattern nonterminal
      | N_mk_pat_pat_uni__ : Uast.pattern nonterminal
      | N_mk_pat_pat_conj__ : Uast.pattern nonterminal
      | N_mk_pat_pat_arg_no_lpar__ : Uast.pattern nonterminal
      | N_mk_pat_pat_arg__ : Uast.pattern nonterminal
      | N_match_cases_term_
          : (Uast.pattern * Uast.term option * Uast.term) list nonterminal
      | N_lqualid_rich : Uast.qualid nonterminal
      | N_lqualid : Uast.qualid nonterminal
      | N_loption_separated_nonempty_list_COMMA_term__
          : Uast.term list nonterminal
      | N_loption_separated_nonempty_list_COMMA_ret_value__
          : Uast.labelled_arg list nonterminal
      | N_loption_separated_nonempty_list_COMMA_mk_pat_pat_uni____
          : Uast.pattern list nonterminal
      | N_loption_params_ : Uast.param list nonterminal
      | N_located_term_arg_
          : (Uast.term * Lexing.position * Lexing.position) nonterminal
      | N_list_type_spec_model_ : Uast.field list nonterminal
      | N_list_fun_arg_ : Uast.labelled_arg list nonterminal
      | N_list_attr_ : string list nonterminal
      | N_lident_rich : Uast.Preid.t nonterminal
      | N_lident_op_id : Uast.Preid.t nonterminal
      | N_lident_op : string nonterminal
      | N_lident : Uast.Preid.t nonterminal
      | N_ident_rich : Uast.Preid.t nonterminal
      | N_guarded_pattern : (Uast.pattern * Uast.term option) nonterminal
      | N_func_spec : Uast.fun_spec nonterminal
      | N_func_name : Uast.Preid.t nonterminal
      | N_func : Uast.function_ nonterminal
      | N_fun_typ : Uast.pty nonterminal
      | N_fun_arg : Uast.labelled_arg nonterminal
      | N_field_pattern_pattern_ : (Uast.qualid * Uast.pattern) list nonterminal
      | N_field_list1_term_ : (Uast.qualid * Uast.term) list nonterminal
      | N_constant : Ppxlib.constant nonterminal
      | N_comma_list2_term_ : Uast.term list nonterminal
      | N_comma_list2_mk_pat_pat_uni___ : Uast.pattern list nonterminal
      | N_comma_list1_term_ : Uast.term list nonterminal
      | N_comma_list1_quant_vars_ : Uast.binder list list nonterminal
      | N_comma_list1_mk_pat_pat_uni___ : Uast.pattern list nonterminal
      | N_comma_list_ret_value_ : Uast.labelled_arg list nonterminal
      | N_cast : Uast.pty nonterminal
      | N_boption_REC_ : bool nonterminal
      | N_boption_MUTABLE_ : bool nonterminal
      | N_binder_var : Uast.Preid.t nonterminal
      | N_bar_list1_separated_pair_guarded_pattern_ARROW_term__
          : ((Uast.pattern * Uast.term option) * Uast.term) list nonterminal
      | N_bar_list1_raises_
          : (Uast.qualid * (Uast.pattern * Uast.term) option) list nonterminal
      | N_axiom : Uast.axiom nonterminal
      | N_attrs_lident_op_id_ : Uast.Preid.t nonterminal
      | N_attrs_lident_ : Uast.Preid.t nonterminal
      | N_attr : string nonterminal
  end

  include Symbols

  include
    MenhirLib.InspectionTableInterpreter.Make
      (Tables)
      (struct
        include TI
        include Symbols
        include MenhirLib.InspectionTableInterpreter.Symbols (Symbols)

        let terminal t =
          match t with
          | 0 -> X (T T_error)
          | 1 -> X (T T_WITH)
          | 2 -> X (T T_WHEN)
          | 3 -> X (T T_VARIANT)
          | 4 -> X (T T_UNDERSCORE)
          | 5 -> X (T T_UIDENT)
          | 6 -> X (T T_TRUE)
          | 7 -> X (T T_TILDE)
          | 8 -> X (T T_THEN)
          | 9 -> X (T T_STRING)
          | 10 -> X (T T_STAR)
          | 11 -> X (T T_SEMICOLON)
          | 12 -> X (T T_RIGHTSQ)
          | 13 -> X (T T_RIGHTPAR)
          | 14 -> X (T T_RIGHTBRC)
          | 15 -> X (T T_REQUIRES)
          | 16 -> X (T T_REC)
          | 17 -> X (T T_RAISES)
          | 18 -> X (T T_QUOTE_LIDENT)
          | 19 -> X (T T_QUESTION)
          | 20 -> X (T T_PURE)
          | 21 -> X (T T_PREDICATE)
          | 22 -> X (T T_OR)
          | 23 -> X (T T_OPPREF)
          | 24 -> X (T T_OP4)
          | 25 -> X (T T_OP3)
          | 26 -> X (T T_OP2)
          | 27 -> X (T T_OP1)
          | 28 -> X (T T_OLD)
          | 29 -> X (T T_NOT)
          | 30 -> X (T T_MUTABLE)
          | 31 -> X (T T_MODIFIES)
          | 32 -> X (T T_MODEL)
          | 33 -> X (T T_MATCH)
          | 34 -> X (T T_LTGT)
          | 35 -> X (T T_LRARROW)
          | 36 -> X (T T_LIDENT)
          | 37 -> X (T T_LET)
          | 38 -> X (T T_LEFTSQRIGHTSQ)
          | 39 -> X (T T_LEFTSQ)
          | 40 -> X (T T_LEFTPAR)
          | 41 -> X (T T_LEFTBRCRIGHTBRC)
          | 42 -> X (T T_LEFTBRCCOLON)
          | 43 -> X (T T_LEFTBRC)
          | 44 -> X (T T_INVARIANT)
          | 45 -> X (T T_INTEGER)
          | 46 -> X (T T_IN)
          | 47 -> X (T T_IF)
          | 48 -> X (T T_FUNCTION)
          | 49 -> X (T T_FUN)
          | 50 -> X (T T_FORALL)
          | 51 -> X (T T_FLOAT)
          | 52 -> X (T T_FALSE)
          | 53 -> X (T T_EXISTS)
          | 54 -> X (T T_EQUIVALENT)
          | 55 -> X (T T_EQUAL)
          | 56 -> X (T T_EPHEMERAL)
          | 57 -> X (T T_EOF)
          | 58 -> X (T T_ENSURES)
          | 59 -> X (T T_ELSE)
          | 60 -> X (T T_DOTDOT)
          | 61 -> X (T T_DOT)
          | 62 -> X (T T_DIVERGES)
          | 63 -> X (T T_CONSUMES)
          | 64 -> X (T T_COMMA)
          | 65 -> X (T T_COLONRIGHTBRC)
          | 66 -> X (T T_COLONCOLON)
          | 67 -> X (T T_COLON)
          | 68 -> X (T T_COERCION)
          | 69 -> X (T T_CHECKS)
          | 70 -> X (T T_CHAR)
          | 71 -> X (T T_BARBAR)
          | 72 -> X (T T_BAR)
          | 73 -> X (T T_BACKQUOTE_LIDENT)
          | 74 -> X (T T_AXIOM)
          | 75 -> X (T T_ATTRIBUTE)
          | 76 -> X (T T_AS)
          | 77 -> X (T T_ARROW)
          | 78 -> X (T T_AND)
          | 79 -> X (T T_AMPAMP)
          | _ -> assert false

        and nonterminal nt =
          match nt with
          | 116 -> X (N N_attr)
          | 115 -> X (N N_attrs_lident_)
          | 114 -> X (N N_attrs_lident_op_id_)
          | 113 -> X (N N_axiom)
          | 112 -> X (N N_bar_list1_raises_)
          | 111 -> X (N N_bar_list1_separated_pair_guarded_pattern_ARROW_term__)
          | 110 -> X (N N_binder_var)
          | 109 -> X (N N_boption_MUTABLE_)
          | 108 -> X (N N_boption_REC_)
          | 107 -> X (N N_cast)
          | 106 -> X (N N_comma_list_ret_value_)
          | 105 -> X (N N_comma_list1_mk_pat_pat_uni___)
          | 104 -> X (N N_comma_list1_quant_vars_)
          | 103 -> X (N N_comma_list1_term_)
          | 102 -> X (N N_comma_list2_mk_pat_pat_uni___)
          | 101 -> X (N N_comma_list2_term_)
          | 100 -> X (N N_constant)
          | 99 -> X (N N_field_list1_term_)
          | 98 -> X (N N_field_pattern_pattern_)
          | 97 -> X (N N_fun_arg)
          | 96 -> X (N N_fun_typ)
          | 95 -> X (N N_func)
          | 94 -> X (N N_func_name)
          | 93 -> X (N N_func_spec)
          | 92 -> X (N N_guarded_pattern)
          | 91 -> X (N N_ident_rich)
          | 90 -> X (N N_lident)
          | 89 -> X (N N_lident_op)
          | 88 -> X (N N_lident_op_id)
          | 87 -> X (N N_lident_rich)
          | 86 -> X (N N_list_attr_)
          | 85 -> X (N N_list_fun_arg_)
          | 84 -> X (N N_list_type_spec_model_)
          | 83 -> X (N N_located_term_arg_)
          | 82 -> X (N N_loption_params_)
          | 81 ->
              X (N N_loption_separated_nonempty_list_COMMA_mk_pat_pat_uni____)
          | 80 -> X (N N_loption_separated_nonempty_list_COMMA_ret_value__)
          | 79 -> X (N N_loption_separated_nonempty_list_COMMA_term__)
          | 78 -> X (N N_lqualid)
          | 77 -> X (N N_lqualid_rich)
          | 76 -> X (N N_match_cases_term_)
          | 75 -> X (N N_mk_pat_pat_arg__)
          | 74 -> X (N N_mk_pat_pat_arg_no_lpar__)
          | 73 -> X (N N_mk_pat_pat_conj__)
          | 72 -> X (N N_mk_pat_pat_uni__)
          | 71 -> X (N N_mk_pat_pattern__)
          | 70 -> X (N N_mk_term_term__)
          | 69 -> X (N N_mk_term_term_arg__)
          | 68 -> X (N N_mk_term_term_block__)
          | 67 -> X (N N_mk_term_term_dot__)
          | 66 -> X (N N_nonempty_func_spec)
          | 65 -> X (N N_nonempty_list_binder_var_)
          | 64 -> X (N N_nonempty_list_lident_)
          | 63 -> X (N N_nonempty_list_located_term_arg__)
          | 62 -> X (N N_nonempty_list_pat_arg_)
          | 61 -> X (N N_nonempty_list_ts_invariant_)
          | 60 -> X (N N_op_symbol)
          | 59 -> X (N N_option_UNDERSCORE_)
          | 58 -> X (N N_option_cast_)
          | 57 -> X (N N_option_preceded_COLON_fun_typ__)
          | 56 -> X (N N_option_preceded_EQUAL_term__)
          | 55 -> X (N N_option_val_spec_header_)
          | 54 -> X (N N_param)
          | 53 -> X (N N_params)
          | 52 -> X (N N_pat_arg)
          | 51 -> X (N N_pat_arg_)
          | 50 -> X (N N_pat_arg_no_lpar)
          | 49 -> X (N N_pat_arg_no_lpar_)
          | 48 -> X (N N_pat_conj_)
          | 47 -> X (N N_pat_uni_)
          | 46 -> X (N N_pattern)
          | 45 -> X (N N_pattern_)
          | 44 -> X (N N_pattern_rec_field_pattern_)
          | 43 -> X (N N_prefix_op)
          | 42 -> X (N N_qualid)
          | 41 -> X (N N_quant)
          | 40 -> X (N N_quant_vars)
          | 39 -> X (N N_quote_lident)
          | 38 -> X (N N_raises)
          | 37 -> X (N N_ret_name)
          | 36 -> X (N N_ret_value)
          | 35 -> X (N N_semicolon_list1_pattern_rec_field_pattern__)
          | 34 -> X (N N_semicolon_list1_term_rec_field_term__)
          | 33 -> X (N N_separated_nonempty_list_BAR_raises_)
          | 32 ->
              X
                (N
                   N_separated_nonempty_list_BAR_separated_pair_guarded_pattern_ARROW_term__)
          | 31 -> X (N N_separated_nonempty_list_COMMA_mk_pat_pat_uni___)
          | 30 -> X (N N_separated_nonempty_list_COMMA_quant_vars_)
          | 29 -> X (N N_separated_nonempty_list_COMMA_ret_value_)
          | 28 -> X (N N_separated_nonempty_list_COMMA_term_)
          | 27 -> X (N N_separated_nonempty_list_COMMA_typ_)
          | 26 -> X (N N_term)
          | 25 -> X (N N_term_)
          | 24 -> X (N N_term_arg)
          | 23 -> X (N N_term_arg_)
          | 22 -> X (N N_term_block_)
          | 21 -> X (N N_term_dot)
          | 20 -> X (N N_term_dot_)
          | 19 -> X (N N_term_rec_field_term_)
          | 18 -> X (N N_term_sub_)
          | 17 -> X (N N_ts_ephemeral)
          | 16 -> X (N N_ts_invariant)
          | 15 -> X (N N_ts_invariants)
          | 14 -> X (N N_ty_arg)
          | 13 -> X (N N_ty_tuple)
          | 12 -> X (N N_typ)
          | 11 -> X (N N_type_spec)
          | 10 -> X (N N_type_spec_model)
          | 9 -> X (N N_uident)
          | 8 -> X (N N_uqualid)
          | 7 -> X (N N_val_spec)
          | 6 -> X (N N_val_spec_body)
          | 5 -> X (N N_val_spec_header)
          | _ -> assert false

        and lr0_incoming =
          ( 8,
            "\000\150J\181\136\012\014\020\0220NR\0280\n\
             TV2468:<DL\n\
             \014NR\0280wP\n\
             \026z\n\
             \026\026z\n\
             \026\156\026RX\017|\019\181\019GY\024G\157p\\hj\142z\142\017R?_cgi\134\145\136&R(\181\136\025\156\025\156\025\029\022\027\029\022\027O\157\181\157\181\136\025\156\025\025\028\130\025\13077\028\157\029\154\181\152\173\233\173\231\215\151\201\231\145\130?\163\028|\017ce\149[]_a\143\145\130?\211\147\146]\205\197\030[\028p|R\028y\n\
             \179\028]pXj\142\017|R`dgi}}\136\029\022\027\193s\156fl\019%)+|R-/1Pz35\0225.525456585F5H5p5\1345\1445\1485\1565\1585\1605\215S=Q\130=\131u\215\221\131\231\209|5UW5y\135\139\141\157\175\177\181\183\201\2335\0265\026z\0265\026\1565\026/1\127\167\1275\028y\017|R\175\181\155\17555\0185x55\028\019-\137\181\183'\024E\157p51\004E\199\030\157\199\0305^5\177\173\229p5^55\004\146A]\0065\185\1565\146AA\153\223\1305\13099\207\203\004\153555\132+15\203\0285t\227\000,\"\217RT\028V\n\
             \132\028\175\189R\129\136\025\028\181\129kp5qtmkb\217\189k\165\136\025qt\191\000\b5 \
             5tv5\138\133t\187\187\187\187\187\000r\023#>\021\169\219B\175\136\025\169\004\181Z5!{{\031t\000P\181\136\025\026RP;I\130;\181\161\028p\011\015;K\016\181(\181P\181\136\025\026R\028\175R\171\181\195\171\181\195y\195o \
             5$\146\017\1565i\1565CM\146CC\225*@9\159n\020v5~\128\159\1405\r\r\r\r\r\r\r\r\r\rt\175\171\181\213p"
          )

        and rhs =
          ( ( 8,
              "\227\191\187\023\015\152\181\173\177\173\150\181\1365tC\146CA\146A\231>\"\136\029;?=9\145\130\2115\130\207\\h\020\142EGR\028\181\016\181(\181P\181\136\025\026\029\029\022\027b\217\189\165\136\025qt,\217\189kqt\175RT\028RV\n\
               \132\028t\133t]]\0065\019\175Jyy\n\
               p0w|R\028P\n\
               \026P\156\026P\n\
               z\n\
               \026Pz\n\
               \026P\n\
               z\026R\179\028\181\177\233\173\195\171\021\1691k?;9\181\017|\181\175\017|\175\223gca_[3/-) \
               5\187v5\187\b5\187\138\187\221\221\131\181\181\129\167\167\127ii}!!{8642\022\n\
               \215\136\193p5\011R\129\136\025\028mmk\151R\028R[\028c\149\231\n\
               \017\201\142z\142\014jNX\197\030_\205gi\134\145\017R\163\028\017e\145\154\231\145\215\143a\147\146]\157p]\157y\183\017|\183fl\131u&\017\1565\017i\1565\017i\017R\161\028p\213p\181P\181\136\025\026YY\024Y\024G''\024'\024EMM\146C\185\1565\185\1565\146A\145\145\130?QQ\130=II\130;55\1309\025\025\1307\141/<5:5W55\15655H55.55\14455\15855\16055855p55F55655455\02255255\13455\14851\127`5\0185x5L]p5^5L\229p5^5D5\004\153D\203\004\153S\209|5d}s\1565\23355\215\139U\201\014j01%R5\028R\028NX\199\030X1\004\199\030TV5\132\135\1570+%\157p5\157-\017|\137+|\1551P5\0261P5\1565\0261P5z5\0261P5z\0261Pz5\026R\203\028+|R5\028rZ5\004\181{\157OR\025\028\029\157R\025\1307\028\157\029\029\022\027\029\181\136\025\156\025(\181\136\025\156\025\025\156\025\029\022\027#\169\031t\219B\175\136\025\012\019\017|\019o\rt*\r~\r@\159\r\128\159\r \
               5\r\1405\rv5\r$\225\rn\020\rK\175\171K\195y\195\175\171" ),
            ( 16,
              "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\b\000\n\
               \000\015\000\016\000\018\000\019\000\021\000\022\000\022\000\023\000\023\000\024\000\026\000\027\000\028\000\029\000\030\000!\000$\000%\000&\000'\000(\000)\000*\000,\000-\000/\0001\0006\0007\000:\000B\000H\000I\000L\000Q\000R\000T\000U\000X\000Y\000Z\000[\000\\\000^\000_\000a\000d\000g\000j\000o\000s\000w\000z\000{\000|\000|\000~\000~t\001\n\
               \001\014\001\016\001\017\001\022\001\023\001\025\001\028\001\029\001\031\001\"\001#\001&\001)\001.\001/\0012\0013\0016\0017\001:\001;\001>\001?\001B\001C\001D\001F\001H\001J\001M\001P\001S\001V\001Y\001\\\001_\001b\001e\001h\001k\001n\001q\001t\001w\001y\001\127\001\133\001\139\001\143\001\147\001\151\001\156\001\158\001\160\001\161\001\162\001\163\001\164\001\165\001\167\001\168\001\171\001\173\001\174\001\177\001\182\001\183\001\186\001\187\001\188\001\190\001\191\001\194\001\195\001\196\001\199\001\202\001\206\001\212\001\218\001\223\001\228\001\231\001\236\001\237\001\237\001\239\001\242\001\242\001\243\001\244\001\247\001\249\001\255\002\000\002\003\002\004\002\t\002\015\002\018\002\021\002\025\002\030\002\031\002 \
               \002#\002&\002&\002(\002*\002-\0020\0023\0026\0029\002<\002?\002B\002F\002H"
            ) )

        and lr0_core =
          ( 16,
            "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\n\
             \000\011\000\012\000\r\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000 \
             \000!\000\"\000#\000$\000%\000&\000'\000(\000)\000*\000+\000,\000-\000.\000/\0000\0001\0002\0003\0004\0005\0006\0007\0008\0009\000:\000;\000<\000=\000>\000?\000@\000A\000B\000C\000D\000E\000F\000G\000s\000t\000m\000n\000o\000p\000q\000u\000v\000w\000x\000y\000H\000I\000J\000K\000L\000M\000N\000O\000P\000Q\000R\000S\000T\000U\000V\000W\000X\000Y\000Z\000[\000\\\000]\000^\000_\000`\000a\000b\000c\000d\000e\000f\000g\000h\000i\000j\000k\000l\000r\000z\000{\000|\000}\000~b\001\t\001\n\
             \001\011\001\012\001\r\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\030\001 \
             \001!\001\"\001#\001$\001%\001&\001'\001(\001)\001*\001+\000\245\001,\001-\001.\001/\0010\0011\0012\0013\0014\0015\0016\0017\0018\0019\001:\001;\001<\001=\001>\001?\001@\001A\001B\001C\001D\001E\001F\001G\001H\001I\001J\001K\001L\001M\001N\001O\001P\001Q\001R\001S\001T\001U\001V\001W\001X\001Y\001Z\001[\001\\\001]\001^\001_\001`\001a\001b\001c\001d\001e\001f\001g\001h\001i\001j\001k\001l\001m\001n\001o\001p\001q\001r\001s\001t\001u\001v\001w\001x\001y\001z\001{\001|\001}\001~
          )

        and lr0_items =
          ( ( 32,
              "\000\000\000\000\000\000 \001\000\000\196\001\000\000 \
               \002\000\000 \
               \003\000\004$\001\000\003l\001\000\000l\001\000\001\184\001\000\003\160\001\000\003t\001\000\003\132\001\000\003\208\001\000\003\128\001\000\003|\001\000\000\240\001\000\003\128\002\000\003\160\001\000\003t\001\000\000\212\001\000\001\192\001\000\003\144\001\000\003\148\001\000\001\180\001\000\001\176\001\000\001\172\001\000\001\168\001\000\002\244\001\000\002\240\001\000\003L\001\000\003H\001\000\003D\001\000\003@\001\000\002\b\001\000\002\024\001\000\002 \
x\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\160\002\000\002\156\002\000\002\160\003\000\002X\001\000\002T\001\000\002T\002\000\000d\001\000\000h\001\000\002\028\001\000\002\020\001\000\000p\001\000\002\020\002\000\002\020\003\000\004,\001\000\002<\001\000\0028\001\000\002\012\001\000\0028\002\000\001$\001\000\001X\001\000\001\252\001\000\0020\001\000\001L\001\000\0024\001\000\0024\002\000\002D\001\000\002@\001\000\0024\003\000\000H\001\000\002t\001\000\003\252\001\000\003\244\001\000\004\016\001\000\004\016\002\000\004\016\003\000\004\020\001\000\004\016\004\000\004\020\002\000\004\016\005\000\004\020\003\000\004\020\001\000\004\016\006\000\004\020\002\000\004\020\003\000\004\020\001\000\004\024\001\000\004\bp\001\000\000p\001\000\004,\001\000\003\180\001\000\002d\001\000\001<\001\000\004,\002\000\003\180\002\000\002d\002\000\001<\002\000\003\128\001\000\003|\001\000\000\240\001\000\003<\001\000\003T\001\000\001L\001\000\001\156\001\000\001\152\001\000\001\156\002\000\003T\002\000\001\208\001\000\003\248\001\000\000\148\001\000\000\144\001\000\000\148\002\000\000\148\003\000\001\208\002\000\003T\003\000\003T\004\000\002h\001\000\002l\001\000\004(\001\000\000\188\001\000\003\164\001\000\003x\001\000\001l\001\000\003\212\001\000\003\184\001\000\003\212\002\000\003\184\002\000\003\212\003\000\000\240\001\000\003\176\001\000\002\236\001\000\001d\001\000\003\204\001\000\003\200\001\000\003\196\001\000\003\192\001\000\003\188\001\000\0038\001\000\003\204\002\000\003\200\002\000\003\196\002\000\003\192\002\000\003\188\002\000\003\204\003\000\001`\001\000\003\204\004\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003(\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\003\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003\004\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\003\000\003\004\001\000\003\000\001\000\002\252\001\000\003,\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\003\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003$\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\003\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003 \
               \002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \003\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003\020\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\003\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003\028\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\003\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003\000\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\003\000\003\000\001\000\002\252\001\000\003\024\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\003\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\0030\002\000\003\\\001\000\0034\001\000\0030\003\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003\b\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\003\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\0034\002\000\003\\\001\000\0034\003\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\002\252\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\003\000\002\252\001\000\003\012\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\003\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003\016\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\003\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003\\\002\000\003P\001\000\000T\001\000\002\204\001\000\002\200\001\000\002\204\002\000\002\204\003\000\002p\001\000\002p\002\000\001\200\001\000\001\132\001\000\001\128\001\000\001\132\002\000\0004\001\000\003P\002\000\003P\003\000\003\\\001\000\003P\004\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003d\001\000\002\248\001\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\002\248\002\000\002\\\001\000\003\152\001\000\003`\001\000\002\232\001\000\003\156\001\000\000\192\001\000\000\248\001\000\0018\001\000\000\244\001\000\002`\001\000\003h\001\000\003X\001\000\003\\\001\000\003X\002\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003\204\005\000\003\200\003\000\003\196\003\000\003\192\003\000\003\188\003\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003\188\004\000\003\200\004\000\003\196\004\000\003\200\005\000\003\196\005\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003\196\006\000\003\192\004\000\002\252\002\000\003\192\005\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\003\000\002\252\001\000\003\192\006\000\001d\001\000\003\204\001\000\003\200\001\000\003\196\001\000\003\192\001\000\003\188\001\000\001\020\001\000\0038\002\000\001\148\001\000\001\144\001\000\001\148\002\000\003\212\004\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003\212\005\000\002\\\001\000\000\204\001\000\000\200\001\000\004,\001\000\001D\001\000\004,\002\000\001D\002\000\000\240\001\000\001D\003\000\000\244\001\000\003\184\003\000\001@\001\000\003\\\001\000\003T\005\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003\\\001\000\003<\002\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003<\003\000\003\\\001\000\003<\004\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003<\005\000\003\\\001\000\003<\006\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003|\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003|\003\000\004,\003\000\000\188\001\000\001h\001\000\003\180\003\000\001<\003\000\000\244\001\000\002d\003\000\002\172\001\000\002\168\001\000\002\164\001\000\002\172\002\000\002\168\002\000\002\172\003\000\003\172\001\000\003\168\001\000\003\168\002\000\003\168\003\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003\204\001\000\003\200\001\000\003\196\001\000\003\192\001\000\003\188\001\000\003\140\002\000\003\140\003\000\000t\001\000\003\140\004\000\003\140\005\000\003\172\001\000\003\168\001\000\003\156\001\000\003\136\002\000\003\136\003\000\003\\\001\000\003@\004\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003@\005\000\003\\\001\000\003@\006\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\000\028\001\000\000\028\002\000\003D\002\000\003D\003\000\003\\\001\000\003D\004\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003D\005\000\003\\\001\000\003D\006\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003\\\001\000\003H\002\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\000`\001\000\003H\003\000\0000\001\000\0000\002\000\000\184\001\000\000\180\001\000\000\184\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\000\184\003\000\002\188\001\000\002\184\001\000\002\188\002\000\002\184\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\002\188\003\000\002\184\003\000\002\188\004\000\002\188\005\000\000,\001\000\003H\004\000\001H\001\000\000`\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\002\220\001\000\002\216\001\000\002\220\002\000\002\220\003\000\000X\001\000\000`\003\000\003L\002\000\003L\003\000\003L\004\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\002\240\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\002\244\002\000\003\148\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\003\148\003\000\003\212\001\000\003\184\001\000\003\160\002\000\003\204\001\000\003\200\001\000\003\196\001\000\003\192\001\000\003\188\001\000\003t\002\000\003|\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\000`\001\000\003\208\002\000\003\208\003\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\000 \
               \004\000\000 \
               \005\000\000\000\001\000\000\004\000\000\000\156\001\000\000D\001\000\000\156\002\000\000\240\001\000\000\168\001\000\000\164\001\000\000\164\002\000\000\164\003\000\000\168\002\000\000\168\003\000\000\168\004\000\000\168\005\000\000\160\001\000\000\156\003\000\001\228\001\000\001\228\002\000\001\228\003\000\004\020\001\000\001\228\004\000\001\228\005\000\001\140\001\000\001\136\001\000\001\140\002\000\000\156\004\000\001\216\001\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\001\216\002\000\000\156\005\000\000\156\006\000\001\236\001\000\001\232\001\000\001\236\002\000\000\152\001\000\000\152\002\000\000\152\003\000\001\028\001\000\000\152\004\000\000\152\005\000\004\020\001\000\000\152\006\000\000\152\007\000\000\152\b\000\000\004\001\000\000\b\000\000\001x\001\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\001x\002\000\001p\001\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\001p\002\000\000\172\001\000\001t\001\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\001t\002\000\001|\001\000\000\176\001\000\000\176\002\000\001|\002\000\001t\003\000\001p\003\000\001x\003\000\000\b\001\000\000\012\000\000\003\216\001\000\000\012\001\000\004\028\001\000\000<\001\000\001\016\001\000\001\016\002\000\004 \
               \001\000\004 \002\000\004 \003\000\004 \004\000\004 \
               \005\000\004\020\001\000\004\028\002\000\003\228\001\000\003\228\002\000\003\224\001\000\003\224\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b`\001\000\004\\\001\000\000\132\001\000\000\132\002\000\000\136\001\000\000\136\002\000\000\140\001\000\000\140\002\000\000\140\003\000\004\020\001\000\000\140\004\000\000\140\005\000\000\240\001\000\000|\001\000\000|\002\000\004\\\002\000\000|\001\000\004\\\003\000\000\128\001\000\001\b\001\000\001\b\002\000\000\244\001\000\000\128\001\000\004`\002\000\004`\003\000\004`\004\000\0040\001\000\004H\001\000\004H\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\004T\001\000\000(\001\000\004,\001\000\002\132\001\000\002\128\001\000\002|\001\000\002x\001\000\002x\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\002x\003\000\002\128\002\000\002|\002\000\002|\003\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\002|\004\000\000(\002\000\002\180\001\000\002\176\001\000\002\180\002\000\002\180\003\000\000$\001\000\004T\002\000\0048\001\000\004@\001\000\0014\001\000\004@\002\000\004X\001\000\004X\002\000\004P\001\000\004P\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\004<\001\000\004D\001\000\004D\002\000\004L\001\000\004L\002\000\003\\\001\000\0034\001\000\0030\001\000\003,\001\000\003(\001\000\003$\001\000\003 \
               \001\000\003\028\001\000\003\024\001\000\003\020\001\000\003\016\001\000\003\012\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\004L\003\000\004D\003\000\004<\002\000\004P\003\000\004X\003\000\004@\003\000\0048\002\000\004T\003\000\004H\003\000\0040\002\000\0040\003\000\004d\001\000\004d\002\000\002\144\001\000\000\244\001\000\002\140\001\000\002\140\002"
            ),
            ( 16,
              "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\011\000\012\000\016\000\017\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\031\000!\000\"\000#\000$\000'\000(\000)\000*\000/\0002\0003\0005\0006\0007\0008\0009\000:\000;\000<\000=\000?\000@\000B\000D\000E\000F\000G\000H\000K\000M\000N\000P\000Q\000R\000S\000T\000V\000W\000X\000\\\000]\000^\000_\000`\000b\000c\000d\000g\000h\000i\000k\000l\000m\000n\000p\000r\000u\000v\000x\000{\000|\000}r\001\018\001\019\001\020\001%\001&\0017\0018\001I\001J\001[\001\\\001m\001n\001\127\001\128\001\145\001\146\001\163\001\164\001\181\001\182\001\199\001\200\001\217\001\218\001\235\001\236\001\253\001\254\002\015\002\016\002!\002\"\0023\0024\0025\0026\0028\0029\002:\002;\002<\002=\002?\002@\002A\002B\002C\002T\002U\002V\002g\002h\002i\002j\002k\002l\002m\002n\002p\002q\002r\002s\002\132\002\133\002\153\002\154\002\156\002\157\002\174\002\175\002\177\002\195\002\196\002\197\002\203\002\204\002\206\002\207\002\224\002\225\002\228\002\230\002\232\002\233\002\234\002\235\002\236\002\237\002\254\003\015\003\016\003!\003\"\0033\003D\003E\003G\003H\003I\003K\003L\003O\003Q\003R\003T\003U\003f\003l\003m\003n\003o\003p\003s\003t\003u\003\134\003\135\003\152\003\153\003\154\003\155\003\156\003\173\003\174\003\191\003\209\003\210\003\211\003\212\003\214\003\215\003\232\003\234\003\236\003\254\003\255\004\000\004\001\004\002\004\003\004\004\004\022\004\023\004\024\004\025\004\026\004\027\004\028\004\029\004.\004?\004P\004Q\004T\004Z\004l\004m\004nt\005\n\
               \005\011\005\012\005\r\005\030\005 \
               \005!\005\"\005#\005$\005%\005&\005'\005(\005*\005+\005-\0053\0054\0056\0057\0058\0059\005:\005;\005<\005=\005>\005?\005A\005B\005C\005D\005E\005F\005G\005H\005J\005K\005M\005N\005O\005P\005Q\005R\005S\005T\005V\005W\005X\005Y\005Z\005[\005l\005m\005n\005s\005t\005\133\005\135\005\136\005\153\005\154\005\156\005\157\005\158\005\159\005\160\005\161\005\162\005\163\005\164\005\165\005\166\005\167\005\184\005\185\005\186\005\187\005\188\005\205\005\206\005\207\005\208\005\209\005\210\005\211\005\212\005\213\005\214\005\215\005\216\005\217\005\218\005\220\005\221\005\222"
            ) )

        and nullable =
          "\002\001@\000\000\000\001\240\000\001\238\000\000\012\000"

        and first =
          ( 80,
            "\000\001H\001\t\128\002c\004\000@\000\000\002\128\000\000\192\000\000\016\001\000\000\000\000\000`\b\000\000\000\004\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000 \
             \000\000\000\000\t\128\000\000\000\000\000\001H\001\000\000\002#\004\000\000\001H\001\t\128\002c\004\000\004\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\002\128\000\000\000\000\000@\000\000\002\128\000\000\192\000\000\004\0000\000\b\128\000\000\000\000\004\000 \
             \000\b\128\000\000\000\000\004\000 \
             \000\b\128\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\128\000\000\006@\001\000\n\
             \244\024\000\002\000\004\000\000\000\b\000\000\000\000\000\006@\001\000\n\
             \244\024\000\002\000\006@\001\000\n\
             \244\024\000\002\000\000\000\000\000\002\240\000\000\000\000\006@\001\000\n\
             \244\024\000\002\000\006@\001\000\n\
             \244\024\000\002\000\006`\001\252N\245|\000\002\016\006`\001\252N\245|\000\002\016\004\0000\000\b\128\000\000\000\000\006`\001\252N\245|\000\002\016\000\000\000\000\t\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\014@\000\000\n\
             \148\024\000\002\000\014@\000\000\n\
             \148\024\000\002\000\004\000\000\000\000\000\000\000\000\000\004\000\000\000\b\000\000\000\000\000\004\000\000\000\b\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\t\128\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000 \
             \000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000$\000\000\000\004\000\000\000\b\128\000\000\000\000\000 \
             \000\240\000\000\000\000\000\000\004\000\000\000\b\000\000\000\000\000\014@\000\000\n\
             \148\024\000\002\000\014@\000\000\n\
             \148\024\000\002\000\014@\000\000\n\
             \148\024\000\002\000\014@\000\000\n\
             \148\024\000\002\000\014@\000\000\n\
             \020\024\000\002\000\014@\000\000\n\
             \020\024\000\002\000\014@\000\000\n\
             \148\024\000\002\000\014@\000\000\n\
             \148\024\000\002\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\t\128\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\016\000\b\000\000\000\000\000\000\000\000\000\000 \
             \000\240\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\014@\000\000\n\
             \148\024\000\002\000\006@\001\000\n\
             \244\024\000\002\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\016\001\000\000\000\000\000 \
             \b\000\006@\001\000\n\
             \244\024\000\002\000\000\000\000\000\002\240\000\000\000\000\006@\001\000\n\
             \244\024\000\002\000\006`\001\252N\245|\000\002\016\014@\000\000\n\
             \148\024\000\002\000\014@\000\000\n\
             \148\024\000\002\000\014@\000\000\n\
             \148\024\000\002\000\014@\000\000\n\
             \020\024\000\002\000\014@\000\000\n\
             \148\024\000\002\000\014@\000\000\n\
             \148\024\000\002\128\004\000\000\000\b\128\000\000\000\000\004\000\000\000\b\000\000\000\000\000\006`\001\252N\245|\000\002\016\000\000\000\000\t\000\000\000\000\000\014@\000\000\n\
             \148\024\000\002\000\000\000\000\000\000\128\000\000\000\000\006@\001\000\n\
             \244\024\000\002\000\000\000\000\002\128\000\000\000\000\000\001\000\016\000\t\128\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\b\128\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000 \
             \001\240\001\000\001\004\000\000\000\000\000\000\b\000\000\000\000\000\004\000\000\000\b\128\000\000\000\000\014@\000\000\n\
             \148\024\000\002\000\016\001\000\000\000\000\000`\b\000\000\000\000\000\b\128\000\000\000\000\000\000\004\000\000\000\128\000\000\000\004\000 \
             \000\b\128\000\000\000\000\001\000\016\000\t\128\000\000\000\000\004\000\000\000\b\000\000\000\000\000\004\000\000\000\b\000\000\000\000\000\000@\000\000\000\004\016\000\002\000\006`\001\252N\245|\000\002\016\014@\000\000\n\
             \148\024\000\002\000\006`\001\252N\245|\000\002\016\000\000\000\000\b\000\000\000\000\000\014@\000\000\n\
             \148\024\000\002\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\128\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\014@\000\000\n\
             \148\024\000\002\128\004\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000 \
             \000\000\000\000\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016"
          )
      end)
      (ET)
      (TI)
end

let val_spec lexer lexbuf : Uast.val_spec =
  Obj.magic (MenhirInterpreter.entry `Legacy 430 lexer lexbuf)

and type_spec lexer lexbuf : Uast.type_spec =
  Obj.magic (MenhirInterpreter.entry `Legacy 408 lexer lexbuf)

and func_spec lexer lexbuf : Uast.fun_spec =
  Obj.magic (MenhirInterpreter.entry `Legacy 389 lexer lexbuf)

and func lexer lexbuf : Uast.function_ =
  Obj.magic (MenhirInterpreter.entry `Legacy 352 lexer lexbuf)

and axiom lexer lexbuf : Uast.axiom =
  Obj.magic (MenhirInterpreter.entry `Legacy 0 lexer lexbuf)

module Incremental = struct
  let val_spec initial_position : Uast.val_spec MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 430 initial_position)

  and type_spec initial_position : Uast.type_spec MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 408 initial_position)

  and func_spec initial_position : Uast.fun_spec MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 389 initial_position)

  and func initial_position : Uast.function_ MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 352 initial_position)

  and axiom initial_position : Uast.axiom MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 0 initial_position)
end
