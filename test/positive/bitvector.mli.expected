
*******************************
********** Parsed file ********
*******************************
type t = private {
  size: int ;
  mutable mask: int }[@@gospel
                       {| invariant 0 <= size <= 63
    invariant 0 <= mask < pow 2 size |}]
[@@@gospel
  {| predicate mem (i: integer) (bv: t) = logand bv.mask (pow 2 i) <> 0 |}]
val create : int -> t[@@gospel
                       {| bv = create n
    checks 0 <= n <= 63
    ensures bv.size = n
    ensures forall i. 0 <= i < n -> not (mem i bv) |}]
val add : int -> t -> unit[@@gospel
                            {| add i bv
    checks 0 <= i < bv.size
    modifies bv
    ensures forall j. 0 <= j < bv.size ->
              mem j bv <-> i = j \/ mem j (old bv) |}]
val mem : int -> t -> bool[@@gospel
                            {| b = mem i bv
    checks 0 <= i < bv.size
    ensures b <-> mem i bv |}]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

type t = private {
size: int ;
mutable mask: int }
  (*@ invariant ...
      invariant ...
       *)

(*@ predicate mem ... *)

val create : int -> t
(*@ bv = create n
    ensures ...
    ensures ...
     *)

val add : int -> t -> unit
(*@  add i bv
    ensures ...
    modifies ...
     *)

val mem : int -> t -> bool
(*@ b = mem i bv
    ensures ...
     *)

*******************************
********* Typed GOSPEL ********
*******************************
module bitvector.mli

  Namespace: bitvector.mli
    Type symbols
       t
      
    Logic Symbols
      function constr#t (_:int) (_:int) : t
      predicate mem (_:integer) (_:t)
      
    Field Symbols
      function mask (_:t) : int
      function size (_:t) : int
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    type t = {size:int; mutable mask:int}
          function constr#t (_:int) (_:int) : t
          function size (_:t) : int
          function mask (_:t) : int
         (*@ 
             invariant (0:integer <= (integer_of_int 
                       (size ):int):integer):prop /\ ((integer_of_int 
                       (size ):int):integer <= 63:integer):propinvariant
                       (0:integer <= (integer_of_int 
                       (mask ):int):integer):prop /\ ((integer_of_int 
                       (mask ):int):integer < (pow 
                       2:integer (integer_of_int  (size ):int):integer):
                       integer):prop *)
    
    (*@ predicate mem (i:integer) (bv:t) =
        not ((logand 
        (integer_of_int  (bv:t).mask):integer (pow 
        2:integer i:integer):integer):integer = 0:integer):prop
    *)
    
    val create : int -> t
    (*@ bv_1:t = create n:int
        checks (0:integer <= (integer_of_int 
               n:int):integer):prop /\ ((integer_of_int 
               n:int):integer <= 63:integer):prop
        ensures ((bv_1:t).size = n:int):prop
                ensures forall i_1:integer. (0:integer <= i_1:integer):prop /\ (
                        i_1:integer < (integer_of_int 
                        n:int):integer):prop -> not (mem 
                        i_1:integer bv_1:t):prop*)
    
    val add : int -> t -> unit
    (*@  add i_2:int bv_2:t
        checks (0:integer <= (integer_of_int 
               i_2:int):integer):prop /\ ((integer_of_int 
               i_2:int):integer < (integer_of_int 
               (bv_2:t).size):integer):prop
        ensures forall j:integer. (0:integer <= j:integer):prop /\ (j:integer < (integer_of_int 
                (bv_2:t).size):integer):prop -> (mem 
                j:integer bv_2:t):prop <-> ((integer_of_int 
                i_2:int):integer = j:integer):prop \/ (mem 
                j:integer old (bv_2:t)):prop
        writes bv_2:t*)
    
    val mem_1 : int -> t -> bool
    (*@ b:bool = mem_1 i_3:int bv_3:t
        checks (0:integer <= (integer_of_int 
               i_3:int):integer):prop /\ ((integer_of_int 
               i_3:int):integer < (integer_of_int 
               (bv_3:t).size):integer):prop
        ensures (b:bool = (True ):bool):prop <-> (mem 
                (integer_of_int  i_3:int):integer bv_3:t):prop*)

OK
