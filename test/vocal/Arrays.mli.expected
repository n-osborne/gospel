
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " {2 Additional operations on arrays} "]
val binary_search : ('a -> 'a -> int) -> 'a array -> int -> int -> 'a -> int
[@@gospel
  {| r = binary_search cmp a fromi toi v
      requires Order.is_pre_order cmp
      requires 0 <= fromi <= toi <= Array.length a
      requires forall i j. fromi <= i <= j < toi -> cmp a.(i) a.(j) <= 0
      ensures  fromi <= r < toi && cmp a.(r) v = 0
      raises   Not_found -> forall i. fromi <= i < toi -> cmp a.(i) v <> 0 |}]
val binary_search_left :
  ('a -> 'a -> int) -> 'a array -> int -> int -> 'a -> int[@@gospel
                                                            {| r = binary_search_left cmp a fromi toi v
      requires Order.is_pre_order cmp
      requires 0 <= fromi <= toi <= Array.length a
      requires forall i j. fromi <= i <= j < toi -> cmp a.(i) a.(j) <= 0
      ensures  fromi <= r <= toi
      ensures  forall i. fromi <= i < r   -> cmp a.(i) v <  0
      ensures  forall i. r     <= i < toi -> cmp a.(i) v >= 0 |}]
val binary_search_right :
  ('a -> 'a -> int) -> 'a array -> int -> int -> 'a -> int[@@gospel
                                                            {| r = binary_search_right cmp a fromi toi v
      requires Order.is_pre_order cmp
      checks   0 <= fromi <= toi <= Array.length a
      requires forall i j. fromi <= i <= j < toi -> cmp a.(i) a.(j) <= 0
      ensures  fromi <= r <= toi
      ensures  forall i. fromi <= i < r   -> cmp a.(i) v <= 0
      ensures  forall i. r     <= i < toi -> cmp a.(i) v >  0 |}]
val binary_sort : ('a -> 'a -> int) -> 'a array -> int -> int -> unit
[@@gospel
  {| binary_sort cmp a fromi toi
      requires Order.is_pre_order cmp
      requires 0 <= fromi <= toi <= Array.length a
      modifies a
      ensures  forall i j. fromi <= i <= j < toi -> cmp a.(i) a.(j) <= 0
      ensures  Array.permut_sub (old a) a fromi toi |}]
val swap : 'a array -> int -> int -> unit[@@gospel
                                           {| swap a i j
      requires 0 <= i < Array.length a && 0 <= j < Array.length a
      modifies a
      ensures  a.(i) = old a.(j)
      ensures  a.(j) = old a.(i)
      ensures  forall k. 0 <= k < Array.length a ->
               k <> i -> k <> j -> a.(k) = old a.(k) |}]
val knuth_shuffle : 'a array -> unit[@@gospel
                                      {| knuth_shuffle a
      modifies a
      ensures  Array.permut (old a) a |}]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " {2 Additional operations on arrays} "]

val binary_search : ('a -> 'a -> int) -> 'a array -> int -> int -> 'a -> int
(*@ r = binary_search cmp a fromi toi v
    requires ...
    requires ...
    requires ...
    ensures ...
    with ...
     *)

val binary_search_left :
  ('a -> 'a -> int) -> 'a array -> int -> int -> 'a -> int
(*@ r = binary_search_left cmp a fromi toi v
    requires ...
    requires ...
    requires ...
    ensures ...
    ensures ...
    ensures ...
     *)

val binary_search_right :
  ('a -> 'a -> int) -> 'a array -> int -> int -> 'a -> int
(*@ r = binary_search_right cmp a fromi toi v
    requires ...
    requires ...
    ensures ...
    ensures ...
    ensures ...
     *)

val binary_sort : ('a -> 'a -> int) -> 'a array -> int -> int -> unit
(*@  binary_sort cmp a fromi toi
    requires ...
    requires ...
    ensures ...
    ensures ...
    modifies ...
     *)

val swap : 'a array -> int -> int -> unit
(*@  swap a i j
    requires ...
    ensures ...
    ensures ...
    ensures ...
    modifies ...
     *)

val knuth_shuffle : 'a array -> unit
(*@  knuth_shuffle a
    ensures ...
    modifies ...
     *)

*******************************
********* Typed GOSPEL ********
*******************************
module Arrays.mli

  Namespace: Arrays.mli
    Type symbols
      
    Logic Symbols
      
    Field Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text " {2 Additional operations on arrays} "]
    
    val binary_search :
    ('a -> 'a -> int) -> 'a array -> int -> int -> 'a -> int
    (*@ r:int = binary_search
        cmp:'a -> 'a -> int a_1:'a array fromi:int toi:int v:'a
        requires (is_pre_order  cmp:'a -> 'a -> int):prop
                 requires (0:integer <= (integer_of_int 
                          fromi:int):integer):prop /\ ((integer_of_int 
                          fromi:int):integer <= (integer_of_int 
                          toi:int):integer):prop /\ ((integer_of_int 
                          toi:int):integer <= (length 
                          a_1:'a array):integer):prop
                 requires forall i:integer j:integer. ((integer_of_int 
                          fromi:int):integer <= i:integer):prop /\ (i:integer <= 
                          j:integer):prop /\ (j:integer < (integer_of_int 
                          toi:int):integer):prop -> ((integer_of_int 
                          (apply 
                          (apply 
                          cmp:'a -> 'a -> int (get 
                          a_1:'a array i:integer):'a):'a -> int (get 
                          a_1:'a array j:integer):'a):int):integer <= 0:
                          integer):prop
        ensures ((integer_of_int  fromi:int):integer <= (integer_of_int 
                r:int):integer):prop /\ ((integer_of_int 
                r:int):integer < (integer_of_int 
                toi:int):integer):prop && ((integer_of_int 
                (apply 
                (apply 
                cmp:'a -> 'a -> int (get 
                a_1:'a array (integer_of_int  r:int):integer):'a):'a -> int
                v:'a):int):integer = 0:integer):prop
        raisesNot_found  -> forall i_1:integer. ((integer_of_int 
                            fromi:int):integer <= i_1:integer):prop /\ (
                            i_1:integer < (integer_of_int 
                            toi:int):integer):prop -> not ((integer_of_int 
                            (apply 
                            (apply 
                            cmp:'a -> 'a -> int (get 
                            a_1:'a array i_1:integer):'a):'a -> int v:'a):
                            int):integer = 0:integer):prop*)
    
    val binary_search_left :
    ('a -> 'a -> int) -> 'a array -> int -> int -> 'a -> int
    (*@ r_1:int = binary_search_left
        cmp_1:'a -> 'a -> int a_2:'a array fromi_1:int toi_1:int v_1:'a
        requires (is_pre_order  cmp_1:'a -> 'a -> int):prop
                 requires (0:integer <= (integer_of_int 
                          fromi_1:int):integer):prop /\ ((integer_of_int 
                          fromi_1:int):integer <= (integer_of_int 
                          toi_1:int):integer):prop /\ ((integer_of_int 
                          toi_1:int):integer <= (length 
                          a_2:'a array):integer):prop
                 requires forall i_2:integer j_1:integer. ((integer_of_int 
                          fromi_1:int):integer <= i_2:integer):prop /\ (
                          i_2:integer <= j_1:integer):prop /\ (j_1:integer < (integer_of_int 
                          toi_1:int):integer):prop -> ((integer_of_int 
                          (apply 
                          (apply 
                          cmp_1:'a -> 'a -> int (get 
                          a_2:'a array i_2:integer):'a):'a -> int (get 
                          a_2:'a array j_1:integer):'a):int):integer <= 0:
                          integer):prop
        ensures ((integer_of_int  fromi_1:int):integer <= (integer_of_int 
                r_1:int):integer):prop /\ ((integer_of_int 
                r_1:int):integer <= (integer_of_int  toi_1:int):integer):prop
                ensures forall i_3:integer. ((integer_of_int 
                        fromi_1:int):integer <= i_3:integer):prop /\ (
                        i_3:integer < (integer_of_int 
                        r_1:int):integer):prop -> ((integer_of_int 
                        (apply 
                        (apply 
                        cmp_1:'a -> 'a -> int (get 
                        a_2:'a array i_3:integer):'a):'a -> int v_1:'a):
                        int):integer < 0:integer):prop
                ensures forall i_4:integer. ((integer_of_int 
                        r_1:int):integer <= i_4:integer):prop /\ (i_4:integer < (integer_of_int 
                        toi_1:int):integer):prop -> ((integer_of_int 
                        (apply 
                        (apply 
                        cmp_1:'a -> 'a -> int (get 
                        a_2:'a array i_4:integer):'a):'a -> int v_1:'a):
                        int):integer >= 0:integer):prop*)
    
    val binary_search_right :
    ('a -> 'a -> int) -> 'a array -> int -> int -> 'a -> int
    (*@ r_2:int = binary_search_right
        cmp_2:'a -> 'a -> int a_3:'a array fromi_2:int toi_2:int v_2:'a
        requires (is_pre_order  cmp_2:'a -> 'a -> int):prop
                 requires forall i_5:integer j_2:integer. ((integer_of_int 
                          fromi_2:int):integer <= i_5:integer):prop /\ (
                          i_5:integer <= j_2:integer):prop /\ (j_2:integer < (integer_of_int 
                          toi_2:int):integer):prop -> ((integer_of_int 
                          (apply 
                          (apply 
                          cmp_2:'a -> 'a -> int (get 
                          a_3:'a array i_5:integer):'a):'a -> int (get 
                          a_3:'a array j_2:integer):'a):int):integer <= 0:
                          integer):prop
        checks (0:integer <= (integer_of_int 
               fromi_2:int):integer):prop /\ ((integer_of_int 
               fromi_2:int):integer <= (integer_of_int 
               toi_2:int):integer):prop /\ ((integer_of_int 
               toi_2:int):integer <= (length  a_3:'a array):integer):prop
        ensures ((integer_of_int  fromi_2:int):integer <= (integer_of_int 
                r_2:int):integer):prop /\ ((integer_of_int 
                r_2:int):integer <= (integer_of_int  toi_2:int):integer):prop
                ensures forall i_6:integer. ((integer_of_int 
                        fromi_2:int):integer <= i_6:integer):prop /\ (
                        i_6:integer < (integer_of_int 
                        r_2:int):integer):prop -> ((integer_of_int 
                        (apply 
                        (apply 
                        cmp_2:'a -> 'a -> int (get 
                        a_3:'a array i_6:integer):'a):'a -> int v_2:'a):
                        int):integer <= 0:integer):prop
                ensures forall i_7:integer. ((integer_of_int 
                        r_2:int):integer <= i_7:integer):prop /\ (i_7:integer < (integer_of_int 
                        toi_2:int):integer):prop -> ((integer_of_int 
                        (apply 
                        (apply 
                        cmp_2:'a -> 'a -> int (get 
                        a_3:'a array i_7:integer):'a):'a -> int v_2:'a):
                        int):integer > 0:integer):prop*)
    
    val binary_sort : ('a -> 'a -> int) -> 'a array -> int -> int -> unit
    (*@  binary_sort cmp_3:'a -> 'a -> int a_4:'a array fromi_3:int toi_3:int
        requires (is_pre_order  cmp_3:'a -> 'a -> int):prop
                 requires (0:integer <= (integer_of_int 
                          fromi_3:int):integer):prop /\ ((integer_of_int 
                          fromi_3:int):integer <= (integer_of_int 
                          toi_3:int):integer):prop /\ ((integer_of_int 
                          toi_3:int):integer <= (length 
                          a_4:'a array):integer):prop
        ensures forall i_8:integer j_3:integer. ((integer_of_int 
                fromi_3:int):integer <= i_8:integer):prop /\ (i_8:integer <= 
                j_3:integer):prop /\ (j_3:integer < (integer_of_int 
                toi_3:int):integer):prop -> ((integer_of_int 
                (apply 
                (apply 
                cmp_3:'a -> 'a -> int (get  a_4:'a array i_8:integer):'a):
                'a -> int (get  a_4:'a array j_3:integer):'a):int):integer <= 0:
                integer):prop
                ensures (permut_sub 
                        old (a_4:'a array) a_4:'a array (integer_of_int 
                        fromi_3:int):integer (integer_of_int 
                        toi_3:int):integer):prop
        writes a_4:'a array*)
    
    val swap : 'a array -> int -> int -> unit
    (*@  swap a_5:'a array i_9:int j_4:int
        requires (0:integer <= (integer_of_int 
                 i_9:int):integer):prop /\ ((integer_of_int 
                 i_9:int):integer < (length 
                 a_5:'a array):integer):prop && (0:integer <= (integer_of_int 
                 j_4:int):integer):prop /\ ((integer_of_int 
                 j_4:int):integer < (length  a_5:'a array):integer):prop
        ensures ((get 
                a_5:'a array (integer_of_int  i_9:int):integer):'a = old ((get 
                a_5:'a array (integer_of_int  j_4:int):integer):'a)):prop
                ensures ((get 
                        a_5:'a array (integer_of_int  j_4:int):integer):'a = old ((get 
                        a_5:'a array (integer_of_int  i_9:int):integer):'a)):prop
                ensures forall k:integer. (0:integer <= k:integer):prop /\ (
                        k:integer < (length 
                        a_5:'a array):integer):prop -> not (k:integer = (integer_of_int 
                        i_9:int):integer):prop -> not (k:integer = (integer_of_int 
                        j_4:int):integer):prop -> ((get 
                        a_5:'a array k:integer):'a = old ((get 
                        a_5:'a array k:integer):'a)):prop
        writes a_5:'a array*)
    
    val knuth_shuffle : 'a array -> unit
    (*@  knuth_shuffle a_6:'a array
        ensures (permut  old (a_6:'a array) a_6:'a array):prop
        writes a_6:'a array*)

OK
