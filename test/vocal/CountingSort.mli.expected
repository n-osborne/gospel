
*******************************
********** Parsed file ********
*******************************
[@@@gospel
  {| predicate k_values (k: int) (a: int array) =
      forall i. 0 <= i < Array.length a -> 0 <= a.(i) < k |}]
[@@@gospel
  {| predicate sorted (a: int array) =
      forall i j. 0 <= i <= j < Array.length a -> a.(i) <= a.(j) |}]
val counting_sort : int -> int array -> int array -> unit[@@gospel
                                                           {| counting_sort k a b
      requires 0 < k
      requires k_values k a
      requires Array.length a = Array.length b
      modifies b
      ensures  sorted b
      ensures  Array.permut a b |}]
val in_place_counting_sort : int -> int array -> unit[@@gospel
                                                       {| in_place_counting_sort k a
      requires 0 < k
      requires k_values k a
      modifies a
      ensures  sorted a
      ensures  Array.permut (old a) a |}]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

(*@ predicate k_values ... *)

(*@ predicate sorted ... *)

val counting_sort : int -> int array -> int array -> unit
(*@  counting_sort k a b
    requires ...
    requires ...
    requires ...
    ensures ...
    ensures ...
    modifies ...
     *)

val in_place_counting_sort : int -> int array -> unit
(*@  in_place_counting_sort k a
    requires ...
    requires ...
    ensures ...
    ensures ...
    modifies ...
     *)

*******************************
********* Typed GOSPEL ********
*******************************
module CountingSort.mli

  Namespace: CountingSort.mli
    Type symbols
      
    Logic Symbols
      predicate k_values (_:int) (_:int array)
      predicate sorted (_:int array)
      
    Field Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    (*@ predicate k_values (k:int) (a:int array) =
        forall i:integer. (0:integer <= i:integer):prop /\ (i:integer < (length 
        a:int array):integer):prop -> (0:integer <= (integer_of_int 
        (get  a:int array i:integer):int):integer):prop /\ ((integer_of_int 
        (get  a:int array i:integer):int):integer < (integer_of_int 
        k:int):integer):prop
    *)
    
    (*@ predicate sorted (a_1:int array) =
        forall i_1:integer j:integer. (0:integer <= i_1:integer):prop /\ (
        i_1:integer <= j:integer):prop /\ (j:integer < (length 
        a_1:int array):integer):prop -> ((integer_of_int 
        (get  a_1:int array i_1:integer):int):integer <= (integer_of_int 
        (get  a_1:int array j:integer):int):integer):prop
    *)
    
    val counting_sort : int -> int array -> int array -> unit
    (*@  counting_sort k_1:int a_2:int array b:int array
        requires (0:integer < (integer_of_int  k_1:int):integer):prop
                 requires (k_values  k_1:int a_2:int array):prop
                 requires ((length  a_2:int array):integer = (length 
                          b:int array):integer):prop
        ensures (sorted  b:int array):prop
                ensures (permut  a_2:int array b:int array):prop
        writes b:int array*)
    
    val in_place_counting_sort : int -> int array -> unit
    (*@  in_place_counting_sort k_2:int a_3:int array
        requires (0:integer < (integer_of_int  k_2:int):integer):prop
                 requires (k_values  k_2:int a_3:int array):prop
        ensures (sorted  a_3:int array):prop
                ensures (permut  old (a_3:int array) a_3:int array):prop
        writes a_3:int array*)

OK
