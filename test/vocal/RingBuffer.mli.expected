
*******************************
********** Parsed file ********
*******************************
[@@@gospel {| open Seq |}]
type 'a buffer[@@gospel
                {| mutable model sequence: 'a seq
            model capacity: integer
    invariant length sequence <= capacity <= Sys.max_array_length |}]
val create : int -> 'a -> 'a buffer[@@gospel
                                     {| b = create n dummy
      requires 0 < n <= Sys.max_array_length
      ensures  b.capacity = n
      ensures  b.sequence = empty |}]
val length : 'a buffer -> int[@@gospel
                               {| n = length b
      ensures n = length b.sequence |}]
val clear : 'a buffer -> unit[@@gospel
                               {| clear b
      modifies b
      ensures  b.sequence = empty |}]
val push : 'a buffer -> 'a -> unit[@@gospel
                                    {| push b elt
      requires length b.sequence < b.capacity
      modifies b
      ensures  length b.sequence = length (old b.sequence) + 1
      ensures  b.sequence = old b.sequence ++ (cons elt empty) |}]
val peek : 'a buffer -> 'a[@@gospel
                            {| r = peek b
      requires length b.sequence > 0
      ensures  r = b.sequence[0] |}]
val pop : 'a buffer -> 'a[@@gospel
                           {| r = pop b
      requires length b.sequence > 0
      modifies b
      ensures  length b.sequence = length (old b.sequence) - 1
      ensures  r = (old b.sequence)[0]
      ensures  old b.sequence = cons r b.sequence |}]
val get : 'a buffer -> int -> 'a[@@gospel
                                  {| r = get b i
      requires 0 <= i < length b.sequence
      ensures  r = b.sequence[i] |}]
val copy : 'a buffer -> 'a buffer[@@gospel
                                   {| r = copy b
      ensures length b.sequence = length r.sequence
      ensures b.capacity = r.capacity
      ensures forall i. 0 <= i < length r.sequence ->
        b.sequence[i] = r.sequence[i] |}]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

(*@ open Seq *)

type 'a buffer
  (*@ ephemeral
      model ...
      model ...
      invariant ...
       *)

val create : int -> 'a -> 'a buffer
(*@ b = create n dummy
    requires ...
    ensures ...
    ensures ...
     *)

val length : 'a buffer -> int
(*@ n = length b
    ensures ...
     *)

val clear : 'a buffer -> unit
(*@  clear b
    ensures ...
    modifies ...
     *)

val push : 'a buffer -> 'a -> unit
(*@  push b elt
    requires ...
    ensures ...
    ensures ...
    modifies ...
     *)

val peek : 'a buffer -> 'a
(*@ r = peek b
    requires ...
    ensures ...
     *)

val pop : 'a buffer -> 'a
(*@ r = pop b
    requires ...
    ensures ...
    ensures ...
    ensures ...
    modifies ...
     *)

val get : 'a buffer -> int -> 'a
(*@ r = get b i
    requires ...
    ensures ...
     *)

val copy : 'a buffer -> 'a buffer
(*@ r = copy b
    ensures ...
    ensures ...
    ensures ...
     *)

*******************************
********* Typed GOSPEL ********
*******************************
module RingBuffer.mli

  Namespace: RingBuffer.mli
    Type symbols
      ('a) buffer
      
    Logic Symbols
      
    Field Symbols
      function capacity (_:'a buffer) : integer
      function sequence (_:'a buffer) : 'a seq
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    (*@ open Seq *)
    
    type 'a buffer
         (*@ ephemeral
             mutable model sequence : 'a seq
             model capacity : integer
             invariant ((length 
                       (sequence_1 ):'a39 seq):integer <= (capacity_1 ):
                       integer):prop /\ ((capacity_1 ):integer <= (max_array_length ):
                       integer):prop *)
    
    val create : int -> 'a -> 'a buffer
    (*@ b:'a buffer = create n:int dummy:'a
        requires (0:integer < (integer_of_int 
                 n:int):integer):prop /\ ((integer_of_int 
                 n:int):integer <= (max_array_length ):integer):prop
        ensures ((b:'a buffer).capacity = (integer_of_int 
                n:int):integer):prop
                ensures ((b:'a buffer).sequence = (empty ):'a seq):prop*)
    
    val length_1 : 'a buffer -> int
    (*@ n_1:int = length_1 b_1:'a buffer
        ensures ((integer_of_int  n_1:int):integer = (length 
                (b_1:'a buffer).sequence):integer):prop*)
    
    val clear : 'a buffer -> unit
    (*@  clear b_2:'a buffer
        ensures ((b_2:'a buffer).sequence = (empty ):'a seq):prop
        writes b_2:'a buffer*)
    
    val push : 'a buffer -> 'a -> unit
    (*@  push b_3:'a buffer elt:'a
        requires ((length 
                 (b_3:'a buffer).sequence):integer < (b_3:'a buffer).capacity):prop
        ensures ((length  (b_3:'a buffer).sequence):integer = ((length 
                old ((b_3:'a buffer).sequence)):integer + 1:integer):
                integer):prop
                ensures ((b_3:'a buffer).sequence = old (((b_3:'a buffer).sequence ++ (cons 
                        elt:'a (empty ):'a seq):'a seq):'a seq)):prop
        writes b_3:'a buffer*)
    
    val peek : 'a buffer -> 'a
    (*@ r:'a = peek b_4:'a buffer
        requires ((length 
                 (b_4:'a buffer).sequence):integer > 0:integer):prop
        ensures (r:'a = (mixfix [_] 
                (b_4:'a buffer).sequence 0:integer):'a):prop*)
    
    val pop : 'a buffer -> 'a
    (*@ r_1:'a = pop b_5:'a buffer
        requires ((length 
                 (b_5:'a buffer).sequence):integer > 0:integer):prop
        ensures ((length  (b_5:'a buffer).sequence):integer = ((length 
                old ((b_5:'a buffer).sequence)):integer - 1:integer):
                integer):prop
                ensures (r_1:'a = (mixfix [_] 
                        old ((b_5:'a buffer).sequence) 0:integer):'a):prop
                ensures (old ((b_5:'a buffer).sequence) = (cons 
                        r_1:'a (b_5:'a buffer).sequence):'a seq):prop
        writes b_5:'a buffer*)
    
    val get : 'a buffer -> int -> 'a
    (*@ r_2:'a = get b_6:'a buffer i:int
        requires (0:integer <= (integer_of_int 
                 i:int):integer):prop /\ ((integer_of_int 
                 i:int):integer < (length 
                 (b_6:'a buffer).sequence):integer):prop
        ensures (r_2:'a = (mixfix [_] 
                (b_6:'a buffer).sequence (integer_of_int  i:int):integer):'a):prop*)
    
    val copy : 'a buffer -> 'a buffer
    (*@ r_3:'a buffer = copy b_7:'a buffer
        ensures ((length  (b_7:'a buffer).sequence):integer = (length 
                (r_3:'a buffer).sequence):integer):prop
                ensures ((b_7:'a buffer).capacity = (r_3:'a buffer).capacity):prop
                ensures forall i_1:integer. (0:integer <= i_1:integer):prop /\ (
                        i_1:integer < (length 
                        (r_3:'a buffer).sequence):integer):prop -> ((mixfix [_] 
                        (b_7:'a buffer).sequence i_1:integer):'a = (mixfix [_] 
                        (r_3:'a buffer).sequence i_1:integer):'a):prop*)

OK
